/*
 * Empty C++ Application
	agnet1
 */
#include <iostream>     // std::cout
#include <algorithm>    // std::generate
#include <vector>       // std::vector
#include <cstdlib>      // std::rand, std::srand
#include<sys/time.h>
#include <cmath>
#include <string.h>
#include<algorithm>
#include <thread>
#include <mutex>
#include"config.hpp"
#include "DQN.hpp"
#include"dqn_fpga.hpp"
#include"xfpga.hpp"
#include"shared_dram.hpp"
#include "client.hpp"
#include "memory.hpp"
#include "server.hpp"
#define AGENT_NUM 4
#define SLEEP_TIME  1
#define USLEEP_TIME  1000
using namespace std;
void agent1_func();

void load_prepared_weight(float *weight, const char *filename);
void bias_init(float *bias,double * bias_weight,int num);
void weight_init(float *weight,double * bias_weight, int num_base,int num);
int RandomNumber () { return (std::rand()%2); }
void generaterandnum(float *arr,int len);
float *ex_memory_Init(int batch,int state_n,DQN *DQNTEST);
void calculate_offset(int iter);
void copy_Initdata_to_dram(float *weight ,float *bias);
void copy_state_to_dram(float *state);

void copy_experience_to_dram(float *experience,int iter);
void copy_ation_from_dram(float *action);
float *hw_result = new float[L3_NUM+BATCH_SIZE+L1_NUM*L2_NUM+L2_NUM*L3_NUM+L2_NUM+L3_NUM];
float *hw_result2 = new float[L3_NUM+BATCH_SIZE+L1_NUM*L2_NUM+L2_NUM*L3_NUM+L2_NUM+L3_NUM];
float *matrix = new float[L1_NUM*L2_NUM+L2_NUM*L3_NUM];
float *inputvector = new float[L1_NUM];
float *eval_bias = new float[L2_NUM+L3_NUM];
float *target_matrix = new float[L1_NUM*L2_NUM+L2_NUM*L3_NUM];
float *target_bias = new float[L2_NUM+L3_NUM];


float *next_state = new float[L1_NUM];
#define FPGA_COMPUTE 1
volatile float *SHARED_BASE ;
volatile float *SHARED_BIAS ;
volatile float *SHARED_STATES ;
volatile float *SHARED_EXP ;
volatile float *SHARED_RESULT ;
int bias_offset;
int state_offset;
int exp_pool_offset;
int result_offset;
float action=-1;
float reward;

float reset=1;
bool mode=0;

ClientNet client;
float SendBuffer[AGENT_NUM] = {0};
float RevBuffer[L1_NUM*AGENT_NUM+5];

#define  BASE_PORT 9000
volatile bool need_state [AGENT_NUM] = {0};

volatile bool done[AGENT_NUM] = {0};

float send_agent_buffer[AGENT_NUM-1][L1_NUM+1] = {0};

float recv_agent_buffer[AGENT_NUM-1] = {0};

struct  timeval start;
struct  timeval middle1;
struct  timeval infer_time_start;
struct  timeval infer_time_end;
#define sleep_time = 1
#define usleep_time = 1000

void client_send(){
	for(int i=0;i<AGENT_NUM;i++){
		if(i==0){
			SendBuffer[0] = action;
			continue;
		}
		else SendBuffer[i] = recv_agent_buffer[i-1];
	}

	client.ClientSend((char *)&SendBuffer, sizeof(SendBuffer));

	cout<<"Thread0:send to PC |--|  actions: \t";
	for(int i = 0;i<AGENT_NUM;i++){
		cout<<SendBuffer[i]<<" / ";
	}
	cout<<endl;
}


void client_recv(){
	client.ClientRecv((char *)&RevBuffer, sizeof(RevBuffer));//从主机接收信息
	cout<<"Thread0:recv from PC |---| state:"<<endl;
	for(int i=0;i<AGENT_NUM*L1_NUM;i+=L1_NUM){
		cout<<RevBuffer[i]<<" ||| ";
	}
	cout<<endl;
	cout<<"Thread0:recv from PC |---| done: \t";
	for(int i=0;i<AGENT_NUM;i++){
		cout<<RevBuffer[AGENT_NUM*L1_NUM+i]<<" ||| ";
		if(i!=0){
			memcpy(&send_agent_buffer[i-1][0],&RevBuffer[L1_NUM*i],L1_NUM*sizeof(float));
			memcpy(&send_agent_buffer[i-1][L1_NUM],&RevBuffer[AGENT_NUM*L1_NUM+i],sizeof(float));
		}
		if(RevBuffer[AGENT_NUM*L1_NUM+i]!=1&&!done[i])	need_state[i] = false;	else{	done[i] = true;	need_state[i] = true;}

	}
	cout<<endl;
}
void server_agent_func(int agent_id){
   	CServer server;
   	cout<<this_thread::get_id();
   	printf("Thread%d :Server is ready for agent_%d.\n",agent_id,agent_id);
   	int port = BASE_PORT+agent_id*10;
    if(server.initserver(port)==false)  printf("Thread%d:Port:%d cannot connect.\n",agent_id,port);
    if(server.Accept()==false)  printf("Thread%d:Port:%d cannot connect.\n",agent_id,port);
	server.Send((char *)&send_agent_buffer[agent_id-2],sizeof(send_agent_buffer[0]));
	printf("Thread%d: Agent_%d connected in port_%d.\n",agent_id,agent_id,port);
	while(!done[agent_id-1]){
		usleep(USLEEP_TIME);
		printf("Thread%d:waiting for receiving from agent_%d.\n",agent_id,agent_id);
   		server.Recv((char *)&recv_agent_buffer[agent_id-2],sizeof(recv_agent_buffer[0]));//接受动作信息
   		printf("Thread%d:receiving from agent_%d over(action_%d : %f).\n",agent_id,agent_id,agent_id,recv_agent_buffer[agent_id-2]);

   		need_state[agent_id-1]  =true;
		while(!done[agent_id-1]&&need_state[agent_id-1]){
	   		usleep(USLEEP_TIME);;
		}
		if(!done[agent_id-1]){
			printf("Thread%d:waiting for sending to agent_%d.\n",agent_id,agent_id);
			server.Send((char *)&send_agent_buffer[agent_id-2][0],sizeof(send_agent_buffer[0]));
			printf("Thread%d:sending to agent_%d over(done_%d : %f).\n",agent_id,agent_id,agent_id,send_agent_buffer[agent_id-2][L1_NUM]);
		}
		else	printf("Thread%d:Agent_%d has accomplished task.\n",agent_id,agent_id);
	}
}
int main()
{
	//配置服务器IP和端口
	int PORT = 8088;;
	string  IP_ADDRESS ="192.168.0.5";
	printf("Please input PC server IP(default input 0 for %s):",IP_ADDRESS.c_str());
	cin>>IP_ADDRESS;
	if(IP_ADDRESS =="0"){
		IP_ADDRESS = "192.168.0.5";
	}
	printf("Please input PC server port(default input 0 for %d):",PORT);
	cin>>PORT;
	if(PORT == 0 ){
		PORT = 8088;
	}
	cout<<"IP_ADDRESS :"<<IP_ADDRESS<<" PORT:"<<PORT<<endl;

   	client.ClientConnect(PORT, IP_ADDRESS.c_str());
	client_recv();
   	thread t0(agent1_func);
   	t0.detach();
	for(int i  =2; i<=AGENT_NUM;i++){
	   	thread t1(server_agent_func,i);
	   	t1.detach();
	}

	gettimeofday(&start,NULL);
   	while(!done[0]||!done[1]||!done[2]||!done[3]){
   	   	gettimeofday(&middle1,NULL);
   		unsigned long  tt_s = (middle1.tv_sec  -  start.tv_sec);
   		unsigned long  tt_ms = (middle1.tv_usec  -  start.tv_usec)/1000;
   		if(tt_s%10==0&&tt_ms%3000==0)cout<<"		Thread0:using time: "<<tt_s<<" s."<<endl;//每隔10s打印一次，防止死机
   		if(need_state[0]&&need_state[1]&&need_state[2]&&need_state[3]){
   	   		//cout<<"Thread0:begin send."<<endl;
   			client_send();
   	   		//cout<<"Thread0:send over."<<endl;
   			client_recv();
   	   		//cout<<"Thread0:receive over."<<endl;
   		}
   		usleep(USLEEP_TIME);
   	}
   	cout<<"Thread0:ALL agents have accomplished their tasks!"<<endl;
	// close socket
	cout<<"Thread0:Client socket to PC will be closed."<<endl;
	client.ClientClose();
    return 0;
}

void agent1_func(){
		cout<<"#Thread1:agent1 is working."<<endl;
	   	DQN *DQNTEST = new DQN();
	    Memory memory;
	    float *experience_mem = ex_memory_Init(DQNTEST->batch_size,DQNTEST->state_n,DQNTEST);//随机初始化经验池
	    int iter_n= DQNTEST->state_n*2+3;
	    float LR=DQNTEST->learning_rate/DQNTEST->batch_size;
	    DQN_info info (LR,DQNTEST->reward_decay,iter_n,DQNTEST->batch_size,0);//配置DQN网络信息

		string filename = "/home/root/weights.bin";
		FILE *infile = fopen(filename.c_str(), "rb");
		if (!infile) {
			cout<<"ERROR while open file:"<<filename<<endl;
			exit(-1);
		}
		int num = L2_NUM+L3_NUM+L1_NUM*L2_NUM+L2_NUM*L3_NUM;
		double bias_weight[num] ={0};
		fread(bias_weight, sizeof(double), num, infile);
		fclose(infile);
	    bias_init(eval_bias,bias_weight,L2_NUM+L3_NUM);//偏置初始化
	    weight_init(matrix,bias_weight,L2_NUM+L3_NUM,L1_NUM*L2_NUM +L2_NUM*L3_NUM);//权重初始化

	    memcpy(target_matrix,matrix,(L1_NUM*L2_NUM+L2_NUM*L3_NUM)*sizeof(float));//权重拷贝到target网络
	    memcpy(target_bias,eval_bias,(L2_NUM+L3_NUM)*sizeof(float));//偏置拷贝到target网络
		memcpy(inputvector,&RevBuffer[0],L1_NUM*sizeof(float));//接受state1、done1
	    //FPGA_COMPUTE = 1,直接用else
	    if(!FPGA_COMPUTE){
	    	/*send the weight data to PL*/
	    	MUAV_fpgatop(experience_mem,inputvector ,matrix ,eval_bias,hw_result,info,1,0,0);

	    	/**inference ,get the Q value  from  evaluate network*/
			info.batch_size=1;
			long  tt_s;
	   	   	gettimeofday(&infer_time_start,NULL);
			MUAV_fpgatop(experience_mem,inputvector ,matrix ,eval_bias,hw_result,info,0,1,0);
	   	   	gettimeofday(&infer_time_end,NULL);
	   	   	tt_s = (infer_time_end.tv_sec  -  infer_time_start.tv_sec)*1000000+infer_time_end.tv_usec  -  infer_time_start.tv_usec;
	   		cout<<"#Thread1:PL 0-1-0 inference time with: "<<tt_s<<" us."<<endl;

	   		/* Train ,get the update date  value  from PL*/
			info.batch_size=DQNTEST->batch_size;

	   	   	gettimeofday(&infer_time_start,NULL);
			MUAV_fpgatop(experience_mem,inputvector ,matrix ,eval_bias,hw_result,info,0,0,0);
	   	   	gettimeofday(&infer_time_end,NULL);
	   		tt_s = (infer_time_end.tv_sec  -  infer_time_start.tv_sec)*1000000+infer_time_end.tv_usec  -  infer_time_start.tv_usec;
	   		cout<<"#Thread1:PL 0-0-0 inference time with: "<<tt_s<<" us."<<endl;
	    }
	    else
	    {
	   	   	gettimeofday(&infer_time_start,NULL);
	    	MUAV_fpgatop(experience_mem,inputvector ,matrix ,eval_bias,hw_result,info,1,0,0);
	   	   	gettimeofday(&infer_time_end,NULL);
	   		long  tt_s = (infer_time_end.tv_sec  -  infer_time_start.tv_sec)*1000000+infer_time_end.tv_usec  -  infer_time_start.tv_usec;
	   		cout<<"#Thread1:PL 1-0-0 inference time with: "<<tt_s<<" us."<<endl;

			FPGA_DQN_core_Init();
			FPGA_setMemory(info.iter_n);
			calculate_offset(info.iter_n);
			copy_Initdata_to_dram(matrix ,eval_bias);
			send_weight_to_FPGA(info);

			copy_ation_from_dram(hw_result);
			fflush(stdout);
			for(int episode=0;episode<EPISODE;episode++)
			{
				mode=0;
				reset=0;

				for(int step=0;step<STEP;step++)
				{

					cout<<"*****************|||episode:"<<episode<<"  step:"<<step<<"/STEP"<<"|||******************"<<endl;
					cout<<"****************************************************************"<<endl;
					action = DQNTEST->choose_action_egreedy();
					if(action==-1)
					{
						info.batch_size=1;
						copy_state_to_dram(inputvector);
						FPGA_DQN( info, 0, 1, 0);

				   	   	gettimeofday(&infer_time_start,NULL);
						MUAV_fpgatop(experience_mem,inputvector ,matrix ,eval_bias,hw_result,info,0,1,0);
						gettimeofday(&infer_time_end,NULL);
				   		long  tt_s = (infer_time_end.tv_sec  -  infer_time_start.tv_sec)*1000000+infer_time_end.tv_usec  -  infer_time_start.tv_usec;
				   		cout<<"#Thread1:PL 0-1-0 inference time with: "<<tt_s<<" us."<<endl;

						copy_ation_from_dram(hw_result);
						action = DQNTEST->calculateMaxOutput(hw_result);
					}

					need_state[0] = true;
					while(!done[0]&&need_state[0]){
						usleep(USLEEP_TIME);
					}
					memcpy(next_state,&RevBuffer[0],L1_NUM*sizeof(float));//接受state1、done1
					memory.push(inputvector, next_state, 0, action,(float)done[0]);

					if(memory.counter > BATCH_SIZE){
					   memory.generateRandomBatchdata(experience_mem);
					   copy_experience_to_dram(experience_mem,info.iter_n);
					   info.batch_size=DQNTEST->batch_size;

					   FPGA_DQN( info, 0, 0, 1);
					   gettimeofday(&infer_time_start,NULL);
					   MUAV_fpgatop(experience_mem,inputvector ,matrix ,eval_bias,hw_result,info,0,0,0);
					   gettimeofday(&infer_time_end,NULL);
					   long  tt_s = (infer_time_end.tv_sec  -  infer_time_start.tv_sec)*1000000+infer_time_end.tv_usec  -  infer_time_start.tv_usec;
					   cout<<"#Thread1:PL 0-0-0 inference time with: "<<tt_s<<" us."<<endl;

					   FPGA_DQN( info, 2,0, 0);

					  // MUAV_fpgatop(experience_mem,inputvector ,matrix ,eval_bias,hw_result,info,2,0,0);
					}
					memcpy(inputvector,next_state,(L1_NUM)*sizeof(float));   //state = next_state
					if(done[0])
						break;
				}

				if(episode  == 200000)
				{
					//	    # Test every 100 episodes
					for(int test=0;test<TEST;test++)
					{
						cout<<"**************"<<endl;
						cout<<"  test episode   "<<episode<<endl;
						cout<<"**************"<<endl;

						mode=0;
						need_state[0] = true;
						while(!done[0]&&need_state[0]){
							usleep(USLEEP_TIME);
						}
						memcpy(inputvector,&RevBuffer[0],L1_NUM*sizeof(float));//接受state1、done1

						for(int step=0;step<STEP;step++)
						{

							info.batch_size=1;
							copy_state_to_dram(inputvector);
							FPGA_DQN( info, 0, 1, 0);
							copy_ation_from_dram(hw_result);

							action = DQNTEST->calculateMaxOutput(hw_result);

							need_state[0] = true;
							while(!done[0]&&need_state[0]){
								usleep(USLEEP_TIME);
							}
							memcpy(next_state,RevBuffer,L1_NUM*sizeof(float));//接受state1、done1

							memcpy(inputvector,next_state,(L1_NUM)*sizeof(float));   //state = next_state
							if(done[0]==1)
								break;
						}
						if(done[0]==1)
							break;
					}
				}
				if(done[0]==1)
					break;
				if(episode%REPLACE_FREQ==0)
				{
					 FPGA_DQN( info, 2,0, 0);
					// DQN_fpgatop(experience_mem,inputvector ,matrix ,eval_bias,hw_result,info,2,0,0);
					 cout<<"replace target Q network weight"<<endl;
				}
			}
	    }
		done[0] = true;
		need_state[0] = true;
	    std::cout<<"*************"<<std::endl;
	    std::cout<<"*agent1 SUCCCESS!!!*"<<std::endl;
	    std::cout<<"*************"<<std::endl;

	    delete[] hw_result;
	    delete[] matrix;
	    delete[] inputvector;
	    delete[] eval_bias ;
	    delete[] target_matrix ;
	    delete[] target_bias ;
	    delete[] experience_mem;
}


void generaterandnum(float *arr,int len)
{
	srand(1);
	float ran_num=rand()%4;
	for(int i=0;i<len;i++)
	{
		arr[i]=ran_num;
	}

}

float *ex_memory_Init(int batch,int state_n,DQN *DQNTEST)
{
	int iter=state_n*2+1+1+1;
   	float *memory = new float[batch*iter];
//   	for(unsigned i=0;i<batch;i++){
//   		std::generate(memory + i*iter, memory + i*iter+state_n,RandomNumber);
//   		std::generate(memory + i*iter+state_n, memory + i*iter+state_n*2,RandomNumber);
//   		memory[i*iter+state_n*2]=10;                                         //reward
//   		memory[i*iter+state_n*2+1]=float(DQNTEST->choose_action_random());   //action
//   		if(i%2==0)
//   		    memory[i*iter+state_n*2+1+1]=0;
//   		else
//   			memory[i*iter+state_n*2+1+1]=1;	//done
//   	}
   	return memory;
}

void load_prepared_weight(float *weight, const char *filename) {
	// calculate size of input data
	int num = L1_NUM * L2_NUM + L2_NUM*L3_NUM;
	printf("CPU: Loading Input from File %s, %u kBytes.\n", filename,
		 num * sizeof(float) / 1024);

	// load binary data from file
	FILE *infile = fopen(filename, "rb");
	if (!infile) {
	printf("ERROR: File %s could not be opened!\n", filename);
	exit(-1);
	}
	fread(weight, sizeof(float), num, infile);
	fclose(infile);

}
/*
void bias_init(float *bias,int num)
{
	float bias_init[L2_NUM+L3_NUM]={0.08235226,0.04595938,0.1,2.5141397,0.0036337897,3.7245395,0.06838396,0.1,0.1,0.044730626,-0.63447565,0.04845808,2.7022378,0.05506797,-0.433033,0.8412868,0.068378896,-0.5205673,0.1,0.1,2.407089,-0.549754,-0.3875732,-0.4926607,0.1,0.054394238,0.5125917,0.1,0.13227183,-0.027094703,-0.57387114,0.029222418,0.1,0.16199198,0.1,3.2791517,0.08510302,0.14117503,0.1,0.07966153,0.20285752,0.31268,0.1,-0.594507,-0.20832151,0.013480771,0.1541857,-0.0074059386,0.1160794,0.068377346,0.07456038,0.1,0.1,-1.0163069,0.1,0.1,-0.48276418,1.5815164,0.1,-0.08761948,2.0897973,-0.0032796115,0.06506113,-0.5657755,
			-0.67058367,-1.0041747,-0.8086308,-0.6543962,-0.3878032,1.5581465,1.3325877,-0.33644247,-0.8040435,1.1606973,
	};

	for(int i=0;i<num;i++)
		bias[i]=bias_init[i];
}
void weight_init(float *weight,int num)
{
	float weight_init[L1_NUM*L2_NUM+L2_NUM*L3_NUM]={-0.074448295,0.25722718,0.40167287,0.11539418,0.45487797,-0.29207382,0.09906717,-0.0836572,-0.105384454,-0.29894933,0.20356138,0.44769597,-0.2798987,-0.5873107,0.011902021,-0.16779907,-0.32357594,-0.21230194,0.2229756,0.23146553,0.2823336,-0.14648491,0.21216679,0.7469504,-0.08819556,-0.38320562,0.4421543,-0.5701064,0.42974854,-0.4093023,0.120542675,-0.31707495,0.073788896,0.1996941,-0.022736408,-0.17856647,0.26289293,-0.26337606,0.2444591,-0.2184752,0.021605477,-0.1656706,0.06468605,0.29506755,0.42754766,0.10115558,0.15153736,0.075414576,-0.25508523,0.35400832,-0.13054696,-0.08979323,0.037898988,0.55778676,-0.4676645,-0.017424121,0.3658508,-0.15623476,0.069368504,0.053765915,-0.08427043,-0.16223006,-0.50458467,-0.46475366,0.38376614,0.087697744,-0.048939265,-0.1983028,-0.3925152,0.046936985,0.034091838,0.08577035,-0.04959003,-0.074276075,0.44563177,0.28363258,0.06118609,-0.82774556,-0.26577374,0.55920345,0.3067331,0.1124808,0.42089498,0.23982324,0.06496029,-0.37557915,-0.13013873,-0.068077855,0.046429247,-0.38433668,-0.02004971,0.2501713,-0.15110147,-0.13377489,-0.089325294,-0.24704015,-1.0348365,-0.7348444,-0.4533101,2.2456024,-2.7928507,2.3325467,2.8822975,-2.167372,3.9906776,3.972796,0.22040728,2.3245115,-2.7221615,2.31886,2.1295857,-3.0004976,5.4045153,5.0337334,1.5746053,2.8688586,-2.638532,2.309637,2.3633914,-2.8321602,4.0879545,4.119579,-0.0073391953,2.822662,-2.6931412,2.6943307,2.6440692,-2.1296258,-0.5409036,-0.420356,-0.31587577,0.12579165,-0.5692216,-0.18807068,0.100833975,-0.16077122,-0.6934941,0.21308805,0.44404674,-0.27712327,-0.89911115,-0.099142194,0.20786807,-0.47836918,-0.48946053,0.35390058,0.080196805,0.17033304,-0.27356327,0.37686196,-0.11413716,0.11635052,0.004846005,-0.0878885,-0.23725036,-0.25387645,-0.2032303,0.09365149,-0.002814252,0.25930023,-6.8165827,-5.9946203,-2.8830478,3.3246992,1.1175942,3.8226616,4.113547,0.76675004,1.6913261,2.4466238,-2.5130024,3.336874,0.8121961,3.6765969,3.746485,0.60063463,2.6577733,3.1604733,-1.5233717,2.815585,0.45308024,3.6692774,3.675965,1.373604,0.2023974,0.9269315,-1.4368768,3.6578474,1.3164413,3.7848613,3.213301,0.8675913,0.13672008,-0.034028344,0.15717195,0.45416796,-0.4430052,0.18867812,-0.3187937,0.0033112597,-0.60807955,0.60559213,0.19889702,-0.31798798,-0.33305264,-0.44162595,-0.26899776,0.44925582,-0.77058464,-0.10794103,0.110684544,0.0687457,0.28180733,0.7865993,0.34747893,-0.09554274,-0.08576733,0.19755416,-0.58055264,0.30357355,-0.01226561,-0.30831885,-0.32516056,-0.3091142,-0.11746036,0.39744675,0.27804357,0.18786828,-0.64151394,-0.5170251,0.066783175,-0.12569042,-0.24166225,-0.079665646,0.013309274,-0.12568675,-0.19851016,-0.07605633,-0.36762813,0.045191154,-0.54186773,-0.2305334,0.31722784,0.111294426,-0.062030647,0.01502459,-0.40812486,-0.24679486,0.031078814,-0.054746352,0.23733199,0.10451075,-0.53127086,-0.2046347,-0.012921256,0.4040366,-0.45351106,0.19438025,0.34988102,-0.10341445,-0.0061204475,0.1385724,0.2879871,-0.19127618,0.023157896,0.19387442,0.30187017,-0.27159825,0.030049449,-0.17875732,-0.14188057,0.10025709,0.048294704,0.0028761507,0.04247342,0.061891545,-0.034501757,-0.1177179,-0.39760605,0.1255657,-0.021183781,-0.30468422,0.21781346,-0.087552264,-0.11174183,-0.27962267,-0.19372892,0.16591758,-0.57718015,0.3538035,0.009116471,-0.14452754,0.09076764,0.21452004,-0.17345417,0.007933509,-0.97933084,0.33194903,-0.21306178,-0.29727095,-0.081890106,-0.16103798,-0.3270598,0.30079973,-0.105160505,0.22899124,-0.5449992,-0.57037556,-0.30516395,0.20171696,0.45148206,0.1565488,-0.0015081689,-0.17250583,-0.18929163,0.21207139,0.031080846,-0.15145053,0.2327202,-0.5339771,1.7850363,1.0739257,0.82629776,0.37219343,-0.53752846,-0.70603573,-0.23380366,-0.40239483,1.2104732,0.57005537,1.8774272,0.20834851,-0.78224665,-0.66268635,-0.45359573,-0.23607163,0.7356686,0.69359607,0.95298123,0.26170203,-0.46715248,-0.8075206,-0.39076796,-0.6127202,1.384074,0.79176974,0.16833039,0.74925005,-0.2899239,-0.5043347,-0.23351043,-0.7146855,0.08785122,-0.63257354,-0.17582545,-0.39239612,-0.5072528,-0.14101258,0.3261206,-0.46890223,0.29017222,-0.061268285,0.19615863,0.16476938,-0.5565143,-0.35258183,0.5062435,-0.008723568,-0.18600792,0.093542986,-0.2233247,0.17613924,0.30457696,0.44547987,-0.18098152,-0.56626785,-0.14857395,-0.29319242,0.10971456,-0.38345352,0.6406354,0.15811306,-0.7683796,-0.055568814,0.80511594,0.7721416,0.23980002,2.4008455,-3.2594354,2.2446501,2.5856555,-3.1171467,5.263088,4.293307,0.43099084,1.8007535,-2.8687766,2.7046044,2.66161,-3.0276854,5.9488397,5.085678,1.3097515,2.3216474,-2.640332,2.5904052,2.8160183,-2.7563632,4.9789963,4.9272146,-0.24962652,2.4148364,-3.187441,2.3228624,2.623613,-3.1361835,-0.032679897,0.008912357,0.051975075,-0.038817506,-0.0018616545,0.1973417,-0.26862866,0.25102267,0.16156118,-0.29313967,-0.02725711,-0.14392012,-0.52269244,-0.35969326,0.12290288,0.0077495165,0.29526982,0.24046893,0.052947167,0.6592268,0.25771865,-0.31340483,0.27647954,-0.79637986,0.051134974,-0.11307317,0.37745684,-0.2958255,0.25307667,-0.18984441,0.006355034,0.30934134,1.9751292,1.2602749,0.97039926,-0.43081775,-0.26076847,-0.9377702,-0.24974793,-0.35906625,1.1563953,0.43517402,1.733097,-0.11754483,-0.59562355,0.11611399,-0.73670524,-0.37841243,0.8462881,0.5066309,0.8940092,0.34487826,-0.5619415,-0.07846236,-0.16839936,-0.14825611,2.016982,1.5588404,0.29992345,-0.509254,-0.1927595,-0.9360587,-0.52251536,-0.24254867,9.928301,10.1772175,1.1939596,-0.5400344,-4.044196,1.0892111,1.5623337,-4.922799,3.291685,3.2592714,1.5035025,-0.8193716,-4.4119196,1.2166001,1.0058646,-4.509261,2.940394,3.3824487,0.67347056,-0.8172631,-3.522552,0.7460883,0.8404895,-4.076885,4.1508946,4.504461,-0.59883076,-0.31433028,-4.0871677,0.9129202,1.0033975,-4.2067327,-0.49712715,-0.044943597,-0.30859616,-0.016884036,-0.46943048,0.15980782,0.3562065,-0.56863403,-0.18777469,-0.3535477,-0.04711078,0.7014416,-0.22727464,-0.26197302,0.14204836,0.39550844,-0.22556545,0.24565284,-0.22499734,0.11248015,0.04008426,-0.15088733,-0.18905777,-0.32786056,-0.0037301686,0.46681467,-0.61683065,-0.5358047,0.2682788,-0.30952665,0.20652086,-0.4549039,7.804367,7.1292014,5.590859,-0.3907704,1.7275434,-0.8850146,-0.27823076,1.7948048,1.3299297,0.57401806,5.0735154,-0.689937,1.1583462,-0.8085279,-1.1170835,1.9784551,0.81865263,0.39863923,3.9087024,-0.39915186,1.7113461,-0.48842552,-0.42702153,1.5202465,2.7885053,2.2705975,4.250917,-1.2405391,1.7598045,-0.43484622,-0.599903,1.6778564,0.32083967,0.1361958,-0.29553562,-0.7180609,0.07096595,0.06659213,-0.23858316,-0.5872384,-0.26667234,0.23797666,-0.07636517,0.35805637,-0.094406836,-0.21849155,-0.31577894,-0.2070108,-0.78979045,0.15545979,0.15920177,-0.2667187,-0.39834157,-0.53554267,0.16648784,0.09877261,-0.5812762,-0.13091953,-0.3134368,-0.2519496,-0.07603373,0.36094993,0.083243914,0.34551194,0.6213369,0.31100738,0.07957939,0.12759484,0.2171606,-0.10657073,-0.10831052,-0.13759485,0.10653006,-0.33897358,-0.04512383,0.7458014,0.34392554,-0.08992162,0.18641299,0.34543425,-0.37558925,-0.36724696,-0.114148706,-0.044633005,0.07465999,-0.5644929,0.15346599,-0.3165621,-0.16499756,-0.33951718,0.09218302,0.02749209,0.19839288,-0.25774014,-0.54436326,-0.43217963,-5.6924376,-5.9127407,-3.1017575,2.2192812,-0.3606399,2.1188657,2.5710356,0.07683092,1.3908744,1.7834533,-2.8958952,2.4312115,-0.31335303,2.4409225,1.9213905,-0.4757631,1.682229,2.390103,-1.834916,2.3674297,-0.04834941,2.2314146,2.9635084,-0.23167579,-0.40085945,0.022484412,-1.5077137,2.340936,-0.13990532,2.5181859,2.2873094,-0.18997107,2.0224373,1.0920379,1.6176752,-0.041245643,-0.20837072,-0.27033788,-0.13472791,-0.415842,1.1412969,0.40068522,2.3700585,0.14294183,0.031416174,-0.37789515,-0.19955201,0.0020491742,0.70714504,0.50470626,1.7078698,-0.39669433,-0.5229241,-0.4700522,-0.45101795,-0.32605758,1.4860196,1.3740327,0.58524835,-0.4134094,-0.29440325,-0.62096244,-0.8961804,-0.87535346,2.3632283,2.283629,1.4650717,0.2611593,-0.8994782,-0.15291482,-0.81809926,-1.1248074,1.3226244,0.9452459,2.4815786,0.13216738,-1.2193705,-0.2100723,-0.4399965,-1.2827784,0.8249767,0.5646312,2.8333163,-0.016173271,-1.1365163,-0.6486489,-0.47052357,-0.5343362,2.6530013,2.1537006,2.2112277,0.7124933,-0.9352182,-0.6189384,-0.45266005,-0.45452094,0.91188276,0.725512,1.0982071,1.0927355,-0.29458952,-0.7474181,0.024063466,0.1819892,0.29774094,0.051145107,1.2683717,1.3525116,-0.34942478,-0.46467146,-0.8151254,-0.5785294,0.3753047,0.5021676,0.96898603,1.3343511,-0.63126236,-0.1448588,-0.6326609,-0.15159672,0.43797264,1.1613406,0.41757822,0.3647965,0.3147245,-0.6304572,-0.76085144,-0.42212576,-0.0039301193,0.39592132,0.33458677,-0.6154214,-0.40622607,0.00089635147,0.004714519,-0.19792508,-0.124157645,0.011130869,0.07472528,-0.22809078,-0.16498901,-0.305464,-0.4217967,-0.24639893,-0.12387631,0.24878113,0.06276788,0.029483957,-0.05447917,-0.2608609,-0.4958331,0.2474475,-0.11920919,-0.25518534,0.03853084,0.40475056,0.17507948,0.19364665,0.38833693,-0.0020032814,-0.30452302,0.11301268,-0.46223238,-0.25978655,0.063925266,-0.37276235,0.18696776,-0.26417056,0.1759154,-0.09767437,-0.20979491,0.27397606,0.075478554,0.012806488,0.15332662,0.06582622,-0.26283383,-0.13137776,-0.09964642,-0.22055805,0.051817298,-0.16819534,0.21038257,0.7184405,-0.05893618,0.030005356,0.21494855,-0.26841253,-0.2739464,-0.08493986,-0.004796963,-0.18249626,2.5123887,2.3634462,1.6341754,0.47081086,-2.2452767,0.40010068,0.22940223,-2.2076592,2.6320157,2.5185266,2.330633,-0.057599075,-2.4688668,0.1223184,0.8573182,-2.5081058,2.960651,2.5347703,0.9896864,-0.47870186,-2.553238,0.2636806,0.39065078,-2.1415007,2.471674,1.8185028,0.4369876,-0.17067046,-2.3648815,0.4616402,0.66259664,-2.5561566,-0.08576993,0.12662682,0.11929438,0.20890711,-0.43727514,-0.652595,0.034697514,0.25597018,-0.29783157,0.32336974,-0.30899635,-0.28068358,-0.52474356,-0.13493031,-0.07319903,0.09999925,-0.11990032,0.48067364,0.3163548,-0.15680066,-0.4517299,-0.22944795,0.21392335,-0.09776581,-0.13519496,-0.2069536,-0.41877592,0.19331686,-0.07441351,-0.3238185,0.40015033,0.044966303,7.7482934,7.565978,1.1739041,-0.22018692,-1.0428097,-0.46377864,0.29691157,-1.6335962,2.8839033,2.6456716,2.1900313,0.21480963,-1.5726554,0.104363196,-0.013961173,-1.5434709,2.8496807,2.0228412,1.816965,0.1477134,-2.0762553,0.76365584,0.3030556,-1.2277102,4.0939918,3.6194901,0.8036877,0.48252925,-1.4729383,0.2147941,-0.43731752,-1.5287828,-0.0981259,0.3209434,-0.15771745,0.6273995,-0.1267687,-0.13106619,-0.076634474,-0.36681187,0.19222097,0.29111192,0.27728486,0.33739892,-0.1557643,0.06195976,-0.1633948,-0.10021051,-0.0799938,0.35178432,-0.023972912,-0.35018218,-0.39819443,0.12545902,0.22525626,-0.081865676,-0.57708764,0.32560322,0.037372675,0.053185984,0.27977234,-0.23151374,-0.17602898,-0.13386007,3.8512313,3.5124388,0.5705268,0.36362478,-4.950287,-0.481789,-0.5677633,-4.87913,0.86895674,0.5462381,-0.3935352,0.28587517,-5.4105964,-0.9382392,-0.5795971,-5.5254035,1.9607179,1.9297929,0.5734024,0.4761457,-4.9527373,-0.5543388,-0.49897838,-4.6065536,3.335209,3.1004543,0.93553764,1.0894134,-5.552405,-0.34104228,-0.67472637,-4.6193633,0.24354568,-0.3645524,-0.58468175,0.2971146,0.61662334,-0.046787642,0.19716808,0.054010026,-0.020356411,0.08160328,0.009359416,-0.16901687,-0.09216729,0.040971626,0.012586679,-0.15506288,-0.3031121,0.15160239,0.04165756,-0.016113073,-0.42281243,-0.121837154,-0.20903844,-0.042745464,-0.5673237,-0.76780134,-0.42996463,-0.023477335,-0.10538266,-0.018211637,-0.09523314,0.0006195046,0.086320795,0.47833446,0.18693279,-0.78015184,-0.11983724,-0.079062134,-0.25236672,-0.14118366,-0.40020183,0.2741035,-0.2100263,0.14243288,0.0070187394,-0.49316022,-0.3043868,-0.34689128,0.39624527,0.7216929,-0.3029175,0.5534413,-0.39598265,-0.10116487,-0.12013849,-0.2761985,-0.13833232,0.34043503,0.16806012,-0.20548801,0.49492255,-0.18809684,-0.748695,-0.009029382,10.486878,9.368998,3.8918643,-1.2436693,-1.2533151,0.36621237,-0.17834508,-1.0739993,4.1595407,3.7759056,2.8765213,-1.0241859,-0.8417742,-0.38369817,-0.06748796,-1.261727,3.9159386,3.9473202,2.4636784,-1.2006587,-1.5258375,-0.16274817,0.08712208,-1.8634757,5.1711183,5.2681856,2.499374,-0.96852404,-1.2888755,0.13613355,0.28490067,-0.7638515,-0.31225112,-0.42913693,0.8862056,-0.38881448,-0.55663073,0.30515134,-0.24877699,-0.016525999,0.008174039,0.54440296,-0.26930574,0.061211687,0.33251542,-0.14448921,-0.29349902,0.31027597,-0.22858791,-0.20572947,0.06925995,-0.26376814,0.35809413,-0.37504354,-0.50308853,-0.28569305,-0.075094774,-0.011586721,-0.22556095,-0.5245608,-0.1337248,0.028885577,0.23528104,-0.14496194,-6.021716,-5.5371733,-3.1095252,3.1911678,0.064768344,3.3214986,3.1198962,0.5456023,1.1288574,1.9834453,-2.8933694,2.8581896,0.45230544,3.0633438,3.665076,0.36297333,2.7892363,2.5311759,-1.6232897,3.2721725,-0.05192893,3.0548317,2.6989052,0.94300413,0.32340106,0.46737754,-1.4950684,2.9755335,0.017240338,3.6197922,3.0618823,0.3046984,-0.52922034,-0.30429265,-0.5810019,0.4777047,-0.2878354,-0.10954942,-0.45395863,-0.4583407,-0.19562028,-0.0021365564,0.27100265,0.24735469,0.1462297,0.0775682,0.15988736,0.10152596,0.6754515,0.17737417,0.06553775,-0.005732894,-0.17906933,0.49001154,-0.73369056,0.18710622,0.067198,0.2501399,-0.15579562,-0.68644327,0.23715365,0.035635635,0.20990512,-0.2945613,9.985971,9.289808,3.3986826,1.1285433,-1.5877705,0.019523162,-0.35755354,-1.334629,3.9017515,3.5252142,2.2799542,0.55065936,-1.4475346,-0.2591156,0.09205852,-1.1737885,2.2529879,2.6571136,1.9945538,0.6903345,-1.0779314,-0.3751612,-0.19545488,-1.5762823,4.3081765,3.3791122,1.5484966,0.5928295,-1.5163689,0.48349577,-0.32596213,-1.5880923,0.07902537,0.20237891,-0.06800573,-0.16849141,-0.23107381,0.28908357,0.05158795,0.47686282,0.05054465,0.0028247559,-0.06344185,0.039274883,0.13387665,-0.29820144,0.17214583,-0.1654287,-0.33813608,-0.30445233,0.33240116,-0.104378246,-0.09837344,0.05880973,-0.42137578,-0.66996276,-0.021166217,0.4535264,0.65340984,0.01685287,0.16674013,-0.1908847,-0.1771362,-0.04794101,-0.17063747,-0.32294506,0.18495128,-0.21460943,0.11678483,0.14862058,-0.013640152,0.35709447,-0.080651596,-0.3364583,0.31909946,0.30233032,0.46598545,0.013160534,-0.07862766,-0.08433096,-0.49314654,-0.04583411,-0.4712272,-0.17607352,-0.19961038,-0.398546,0.41503292,-0.10854449,-0.42278352,-0.06935525,-0.36658162,-0.3512214,0.21563098,-0.2424736,-0.3283293,0.287422,8.224842,6.9952655,1.2526554,-0.763653,-1.6814692,0.49417207,0.4184638,-1.5044754,4.0196176,3.8968182,2.5395672,-0.016033318,-1.6993659,-0.13963325,0.12666395,-1.697501,3.0693243,3.120202,2.0792532,-0.5717239,-1.3546143,-0.20054312,-0.2761738,-1.5054202,5.3868165,4.731758,0.96693796,-0.24257387,-1.7063613,0.4055514,-0.10644212,-1.1473715,9.537154,9.575035,2.105358,2.3200157,-2.8696525,0.5009375,0.4351555,-3.0699017,2.8036134,3.0085695,2.8760383,1.6453724,-2.5557811,0.215817,0.2592104,-2.9409254,2.5723372,2.7477696,0.8670253,2.1393065,-3.218661,0.4546541,0.2315577,-2.4093964,4.1563153,3.6058402,-0.09602037,1.660166,-3.4246485,-0.55065745,0.27792704,-2.2677858,-0.13796581,0.05269788,-0.14337814,0.360326,-0.39237037,0.29418573,0.21220917,0.015781704,-0.43640196,-0.095309585,-0.45444456,-0.052868124,-0.8504596,-0.53470993,-0.31455246,0.3638979,0.07818553,0.08595899,-0.29068413,0.28942046,0.11377749,-0.07247456,-0.34170735,-0.06449943,-0.04272473,0.31081402,-0.03699988,-0.1349556,0.120399974,-0.0713115,-0.3721379,-0.020057317,1.2294331,1.7606504,0.98139983,-0.5785064,-0.2752857,-0.42269018,-1.0754033,-0.04544952,1.3585709,0.7890364,2.2928648,-0.6237537,-0.21392292,-0.4849786,-0.4758557,-0.3505294,0.9049003,0.58261853,2.1751552,-0.021134257,0.0035415106,-0.2581976,-0.6358509,0.13909566,2.0218754,0.94852954,0.9591072,-0.4800814,-0.03394281,-0.3180982,-0.38447857,-0.024097655,0.80299604,0.99648666,1.0772702,0.111344725,-0.06871119,-0.35991412,-0.27046686,-0.4075138,0.8046344,0.2824375,1.885701,-0.2668759,-0.13674587,-0.47942412,-0.1240071,-0.55188835,0.15611728,0.44534445,1.3274367,0.15813284,-0.3896299,0.023007024,-0.4292034,-0.6625098,1.3808646,0.63937813,0.9560828,0.045717776,-0.051095497,-0.64106786,0.042320378,-0.60306567,-0.3179085,-0.22909081,-0.43195772,-0.020649275,-0.3849097,1.1474853,-0.19342688,0.16945758,-0.3581927,0.27789176,0.5389902,-0.45875394,-0.18485226,-0.3374994,-0.33021283,0.025162002,-0.04440753,-0.23789497,-0.2749618,-0.16220109,-0.33876678,-0.19193411,-0.015228376,0.4624879,0.42323172,0.027352553,-0.4232604,0.44084382,-0.41599208,-0.057811394,-0.04422192,-0.10058124,8.311749,7.5662236,2.552257,0.21785448,-1.350044,0.18628246,0.008417196,-0.9849102,3.5666015,2.5904725,3.3446956,0.15602711,-2.1172607,0.14673883,-0.29384148,-1.3667092,2.5780754,2.4637954,1.9140402,0.092436425,-1.745995,0.18761411,0.53383213,-1.6642003,4.7038703,4.4690366,0.7160009,0.17728566,-2.1848447,-0.35512018,0.16536959,-1.901279,-0.19626512,0.2876416,-0.3004314,0.24195197,0.08872762,-0.0886351,0.24692087,-0.28924102,-0.59011894,-0.17929904,0.64820254,0.095674016,-0.10993509,0.019030783,0.16347459,-0.17563555,0.0014515053,-0.09825431,-0.029451221,-0.12872939,0.14755818,-0.21141791,-0.1060353,0.3087738,0.012056526,0.14758645,-0.10952678,0.28389183,0.55180055,-0.30435488,-0.18697405,-0.03752922,-1.4330596,-0.6453436,-0.87914634,0.48958096,-0.3652198,-0.030477785,-0.22989452,-0.30065295,-0.21401897,-0.33439028,-1.5154382,0.12739427,-0.4579436,0.05090739,-0.4862745,0.03741479,-0.21891284,0.00739689,-1.3192505,-0.2608111,0.548079,0.5157428,0.588427,-0.31069395,-0.6024329,0.007702576,-1.3759774,0.36015925,-0.28596482,-0.06773592,-0.06029939,0.086715065,0.06730895,0.20251486,-0.5960147,-0.35712206,-0.023069907,-0.1458886,0.044642672,-0.723748,0.34000155,-0.28993887,0.38654485,0.1205336,-0.053823363,0.55766064,-0.1970112,-0.19375485,-0.030032596,-0.17876917,0.3318864,0.114938065,0.37147364,-0.100829534,-0.115321204,0.08003622,-0.6765032,0.11566206,0.010774098,-0.31738153,-0.16568589,-0.26584554,0.04985203,-0.2564405,5.537412,4.9731374,3.233092,0.016707063,-3.6976635,0.2724881,-0.056014415,-3.6103404,2.903477,2.981332,1.9498824,0.019202165,-3.6298535,0.20354563,0.3890057,-3.8811266,2.1921048,2.6456776,2.2947228,0.3159037,-3.9734342,0.21841878,0.050601576,-3.8568447,4.143881,3.9324484,2.1524398,0.2678894,-3.6722162,0.047919843,0.32702163,-3.773945,-0.17116731,-0.047549043,-0.26013786,-0.059172135,-0.50319403,0.21910203,-0.4878379,-0.59286714,-0.20834902,0.34401685,0.024176106,0.3011486,-0.3351652,-0.4654735,-0.32757795,-0.10723358,0.16516387,-0.4473598,-0.096218966,0.091546595,0.5648163,-0.29067895,0.21834914,-0.5192456,-0.24059723,-0.09596771,-0.47006473,0.06803977,0.2409367,-0.48520002,-0.03304129,0.12609021,0.22383861,-0.08753322,0.012799157,-0.39006427,-0.18366967,0.29098287,-0.3894899,-0.19404332,-0.44110134,0.15222508,0.37930533,-0.22977339,-0.10368668,-0.18244264,-0.028521774,0.2600642,-0.05486412,0.43689707,0.13759217,-0.10285635,-0.007947868,0.11125498,0.3933714,-0.15158445,-0.35840094,0.5718105,0.061361846,0.2608072,0.26250866,-0.6422766,-0.35401314,-0.73988473,2.913661,1.7638757,7.4596186,-2.247762,4.7297387,-1.2372258,-1.1862158,4.9842296,-2.6758494,-2.9434106,7.002601,-2.5722606,4.851417,-1.395256,-0.8125213,4.7628627,-3.4464514,-3.5345747,5.7126913,-2.8490443,4.2653975,-0.676333,-0.99639827,4.596006,-1.5754582,-0.9470813,5.672115,-2.8049219,5.0009904,-1.030989,-1.0432178,4.8137155,-0.027977068,0.23817985,0.16155566,0.23014799,0.2850485,-0.13363963,-0.20767997,0.054930955,-0.16603214,0.3174656,-0.099370815,0.41370058,-0.12285858,0.49521172,0.23433295,-0.60426843,0.2926324,0.24028808,0.010740891,-0.33898094,0.060385518,-0.2689711,0.059765443,0.57397974,-0.42508295,0.13925529,-0.18016142,-0.11835626,-0.54407316,-0.36976513,-0.25127894,0.31171146,0.44710946,0.30788538,0.19174264,-0.18740056,0.1839245,0.056406952,-0.059807893,0.16861281,-0.43802452,-0.33450353,0.07910642,-0.12635437,-0.10043959,-0.50084835,0.21504556,-0.22497702,-0.15960197,-0.19918989,0.14483437,-0.13834819,0.21325685,-0.2746951,0.12291584,0.16818297,0.031342648,-0.18633321,0.14642599,0.40976217,-0.15418783,0.11676475,-0.11520187,-0.45414343,1.1612171,1.3671461,1.3428823,-0.2413426,-0.07516952,-0.58418846,-0.5056542,0.16591573,0.8852957,1.6388227,2.3594358,-0.32754296,-0.27596733,-0.70100415,-0.4644854,-0.084904924,1.19801,1.482116,1.9983115,0.08339594,-0.0953964,-0.55283046,-0.6851306,-0.37439898,1.7181393,1.7721442,1.190778,-0.14155999,-0.025289949,-0.34316126,-0.23731056,0.15072191,1.5212423,0.89548236,0.53785455,-0.21004656,-3.7193787,1.2206706,1.4356815,-3.316573,4.0000567,4.479939,1.0116068,-0.31536463,-2.643788,1.4312071,1.4391836,-4.1000614,5.8957295,5.876068,0.38012272,0.27904266,-2.9856727,1.565214,1.6686612,-3.2662795,5.3481355,5.0884666,0.042498607,-0.4553792,-3.0970914,1.7794966,2.0263362,-3.2460825,0.0012771782,0.52857697,-0.041722644,-0.16122156,0.08857534,-0.24729453,-0.16155091,-0.39839265,0.045315847,0.16353911,0.44600892,0.30251482,0.016832437,-0.53227466,-0.17654273,0.38506734,0.14885923,-0.5880195,0.3794786,-0.21304229,0.2642723,-0.10181696,-0.3098303,-0.28955626,-0.15684271,-0.6505121,0.3318333,0.60049486,0.1561118,0.16812423,0.19436406,-0.23106012,0.04446336,-0.078265816,-0.5478262,0.39815056,-0.028316889,0.36196646,-0.44784775,-0.32824022,0.06168352,-0.41348317,-0.20789894,0.35888374,-0.1664722,0.03189261,-0.5661664,-0.18387948,0.26128545,0.31815472,-0.071490645,0.048511636,0.5724286,0.05505937,-0.06600775,0.2737571,0.44363487,0.08462777,-0.14255257,0.14287025,0.027102973,-0.1935169,-0.42617705,-0.36862445,-0.92351145,-2.2829733,-0.27518502,1.804579,-2.2204976,1.6720973,1.6661658,-3.003859,3.1974707,2.854792,0.59787905,1.7749797,-2.3731093,2.403949,2.021314,-2.5370145,3.9919887,3.1974564,0.84636277,2.1323805,-2.1772604,1.9447557,2.5226543,-2.8216763,3.3073637,3.0451312,0.051118787,2.1188312,-1.7931081,2.0912917,2.1692946,-2.0620983,0.09340173,0.21685436,-0.30836684,0.23227343,0.15214586,-0.42117244,-0.17018959,-0.13807417,-0.41402873,0.5445589,-0.34889975,-0.03940071,0.035879973,0.3594663,-0.73866993,-0.04419687,-0.14283475,-0.3858429,0.30168504,-0.16132218,-0.10597178,0.12724343,0.06324918,0.0023306683,0.78103685,0.13287961,0.43241048,0.0414579,-0.20148441,0.48271066,-0.18931007,0.15416911,-0.19815376,0.01718408,0.10144956,0.30872217,0.44288504,-0.13915972,0.36238995,0.025322618,-0.009855801,0.8119021,-0.13055542,-0.008643178,-0.41997868,-0.14124669,-0.27090013,0.2880093,0.18542776,-0.5185173,0.03554944,0.008371992,0.075257316,-0.023286875,-0.36617893,-0.29809526,-0.3021779,-0.16773844,-0.40543035,0.14330393,0.08285846,0.0645651,-0.11119267,-0.14870998,1.2064514,1.4978728,0.89922136,0.9632932,-0.55497056,-0.94737613,-0.3862861,-0.41023037,1.2308574,0.8373413,1.9136901,0.6851608,-0.19061576,-0.5838323,-0.21958762,-0.73057157,0.8139615,0.98920214,0.30994177,0.52230656,-0.52614397,-0.68235695,-0.4146239,-0.35143062,1.3857596,1.5003749,0.3305366,0.6145214,-0.4647607,-0.23580107,-0.7349525,-0.41755947,
			-0.85533327,0.33192983,-0.0016693994,-0.19814621,0.008194768,0.14047448,-0.26248744,0.09848457,0.8437148,0.18522869,-0.38482073,-0.2157237,0.20151497,-0.32540402,0.24278189,0.37260035,0.118140556,-0.020263564,-0.40136653,0.07318747,-0.39278013,0.055438753,0.14050129,-0.120709315,-0.2745746,0.21540457,-0.12813826,-0.13398325,-0.06683121,0.19417171,-0.2960744,-0.5590129,-1.2074149,-0.44142625,0.28681412,2.5528803,1.2510598,0.58618504,0.49359268,1.4368181,0.74300253,-0.32816967,-0.120171376,0.07462703,-0.6517914,0.57085294,0.007734852,-0.14794774,-0.35198838,0.06800201,0.64800924,1.0625767,0.9538061,1.0803869,0.31401673,2.0374784,2.3272653,1.030167,1.785847,2.6446936,-0.2015713,0.33891043,0.7695868,0.34421295,-0.02985676,-0.3923781,0.5855305,-0.012267265,0.39142713,0.040469043,-0.44799682,-0.1395619,-0.091794714,-0.0064257802,-0.19752374,0.26205188,-0.7006309,-0.11839591,-0.16527015,0.39976284,-0.18583924,0.41085368,0.043027725,0.08690661,0.26840085,0.36600667,-0.4940087,-0.03424411,0.067802645,0.6648042,-0.4135832,0.2619442,-0.1873297,-0.27358264,0.31349468,0.13742928,0.06149586,-0.25357527,-0.44639164,0.14533259,-0.59736896,-0.5649964,-0.48631844,-0.37195235,-0.4435162,-0.69626653,-0.62464774,-1.018586,1.4255545,0.22240926,0.037525527,-0.0580162,0.599546,-0.39903525,-0.072431326,-0.22996847,0.3978493,-0.13569877,-0.16423889,0.09360161,-0.48544994,-1.0181547,-0.93128234,-0.914157,0.04171849,2.6359825,0.9789106,0.027748134,0.1817665,1.592072,1.0341408,0.41192713,0.10892784,-0.19321145,-0.028524559,0.1317775,0.12546657,0.2697429,0.575619,0.1475432,0.36447543,0.1033804,-0.38669428,0.3017584,-0.11749984,0.5266004,0.5652769,0.19937783,-0.016817998,-0.093254924,0.09216566,0.0072388668,-2.0960574,-1.2675542,-1.5581542,-8.614399,-3.4627721,-0.0064086337,-1.9528097,-5.422297,-0.42538953,0.6663976,0.2020344,0.37131685,-0.08576512,-0.15343228,0.5352051,-0.0652581,0.1669941,0.011414979,-0.78272516,-0.9318354,-0.9286424,-0.8753702,-1.2158159,-7.161926,-2.5456138,-2.311734,-1.8914044,-3.542752,-0.5530666,-0.8522413,-0.25154424,-0.12936594,0.026837675,0.35942936,0.2699865,0.0431307,0.0016781735,-0.2977372,-0.0105894385,0.17038378,-0.10154091,0.04000511,0.5710274,0.43338764,-0.39783046,-0.120797135,-0.27076864,0.0992329,0.06993529,-0.36257604,0.5012839,0.115456276,0.07657989,1.1032808,1.0255181,0.47567183,0.690148,1.6701112,-0.06162732,-0.25956628,-0.66481656,-0.22822303,0.122358516,-0.23161104,0.064865306,-0.4487354,-0.2149064,-0.09805258,-0.7125661,0.23307739,-0.11135599,-0.37445688,-1.0269325,1.1318078,-1.0331476,-0.36859927,0.34496593,2.784932,-0.9989602,-0.56324667,-0.719255,0.06704612,0.09662338,-1.5418813,-2.108018,-0.55421937,0.6130058,0.17379205,-0.07920634,0.3894064,-0.35573933,-0.22632325,-0.112169385,0.20336042,-0.18791366,0.23542546,-0.35947168,-0.23162211,-0.12717266,0.16978936,-0.17571577,-0.37855014,0.1036544,0.4107902,0.34880176,-0.08989118,-0.29951257,0.33632433,-0.27572668,-0.5257383,-0.77902114,-0.7503584,-0.1314517,-2.865388,-1.3394206,-0.7076575,-0.07879774,-2.3756678,-0.5202938,-0.33612853,-0.28510562,0.18136127,0.00790127,-0.1544099,-0.34792405,0.015870007,-0.13319577,-0.27598673,0.060991235,-0.805568,-0.9730729,-0.046128776,0.0054933876,-5.237003,-0.7353843,0.46280044,1.7017891,-3.8501825,0.13042787,0.29804873,0.022567052,0.03271772,0.14691556,0.048178606,0.29271868,0.28204775,-0.03341399,0.043015935,-0.82819676,-0.7605138,-0.89797604,-0.027226586,-0.02330572,1.4998528,2.4598336,0.7632173,1.2380817,5.780546,0.18941331,-0.59157604,-0.08425933,0.17498815,-0.107288055,-0.04133246,-0.359513,0.22426654,0.5600444,0.33941334,0.12538616,-0.054332543,0.6137055,-0.10144537,0.22894788,-0.14940178,-0.62069386,-0.023880553,-0.46963435,0.24685498,-0.60473245,-2.0085144,-1.7355417,-0.8978315,-0.9241255,-6.2079678,-0.60277885,-3.4321034,-2.412432,-4.323116,-0.20799676,-0.33409995,0.31741673,0.036390286,0.18238632,-0.09579354,-0.29793307,0.01222421,-0.21843773,0.2745559,0.35203317,-0.05907264,0.47078687,0.59689206,0.13701786,1.5112076,1.4474885,1.2480434,0.75166,1.8659223,0.060901746,0.12817419,-0.62192476,-0.6588563,0.2922918,-0.078220814,-0.59066117,0.32454342,0.19019918,0.480115,0.7133773,-0.87547493,-0.92494947,-0.45168304,-0.21105821,-8.110162,-2.4156628,0.17592521,0.9476437,-4.1555624,-0.27504918,-0.087784,0.16646633,0.1313464,-0.21553211,-0.1416662,0.9005625,-0.34652698,-0.0092047,-0.15010205,0.03198214,0.07993674,-0.46681327,0.15413725,-0.4099453,0.16301368,0.25040027,-0.23947696,-0.36933148,0.109594256,1.1716126,-0.14795324,-1.0712936,-0.6920619,0.105549514,-6.76095,-0.41197082,0.08093265,-1.3531576,-4.5457506,-1.0426253,-0.1391587,-0.43566713,-1.5383132,0.48272023,-9.0936,-5.405538,-1.199172,-1.5244361,-4.3942747,0.24379934,-0.66877115,-0.18652785,0.27212504,-0.39788035,0.103816494,0.51699716,0.27607542,-0.09102869,0.25770417,0.0154463425,-0.33134738,-0.292427,0.17697892,-0.59240896,-0.54475236,-0.49548218,-0.44555327,-0.8455899,-1.3690813,-0.1081907,0.23213425,-0.23950522,-0.46247748,-0.42769557,-0.037205517,0.0026510954,-0.59159917,-0.11536406,0.14000325,0.29223314,0.25765133,-0.2602409,0.14656052,-0.4925922,-0.17267977,0.43182838,0.44866717,0.039213367,0.39425403,1.0211166,0.1702973,-0.8461404,0.7146624,0.6421009,-7.364416,-0.6685954,1.1653999,0.95961684,-4.340427,-0.13345431,-0.4731595,0.5580895,-0.03736656,0.25181094,-0.00012930782,-0.1240432,-0.14381,-0.22171481,-0.07383394,0.2763959,0.4117748,1.026704,0.5370021,0.15002723,0.5273484,0.311779,0.5099811,0.036126837,0.32798272,-0.4071263,0.12978512,-0.24266742,-0.11094491,-0.11238616,-0.2368266,-0.41409263,0.21965326,-0.58078104,-0.29832354,-0.75261045,-1.1563568,-0.52462345,0.037362233,-1.0468228,2.3456006,-4.254052,-0.08012134,1.2179725,3.7093358,-0.60379523,-0.31600818,-0.04098019,0.31179118,-0.21492866,0.7784713,0.012540185,-0.35792264,-0.039965734,0.21623912,-0.2067633,0.038988933,-0.29021946,-0.15917331,-0.8423768,0.07841976,0.041946888,-0.06364071,-0.17832845,-0.0660888,-0.83724225,-0.751922,-1.9007134,-0.48222226,-1.0318816,-24.072598,-11.723926,-2.3877463,-4.4157376,-25.28256,-0.08612443,-0.897815,0.25747684,0.3634534,0.4660048,0.24905199,-0.41377702,0.17421027,-0.29047304,0.18602985,0.06842768,-0.068112694,0.24150385,0.0552292,-0.20923802,0.2576846,0.16920087,-0.05940449,-0.12532336,-0.056574255,-0.35214758,-1.0251253,-0.45295528,-1.0111415,-0.70956963,-0.611424,-1.378002,-1.0699074,-0.90979993,-1.0506452,-0.49698544,-1.3110012,-1.686781,-0.76076645,-0.19724384,4.313433,0.16319315,-2.1327295,-1.2563397,1.7848234,0.019324,-0.091844246,0.011127031,-0.2923542,0.1250106,-0.083891496,-0.010319143,-0.2242694,-0.48911056,-0.2868829,-0.112303555,0.085428454,0.2732149,0.25197387,-0.13362834,0.472017,-0.19955602,0.6171313,-0.13370967,-0.13564184,0.14129412,0.40659538,-0.37013358,0.1739321,1.7322726,2.4261622,0.9421798,0.49241877,0.28295422,1.5681251,-0.1441626,0.06390383,0.14940654,0.253613,-0.023519166,0.04971022,0.47232634,-0.3834006,0.05276395,-0.009131458,-0.26933128,0.24825507,-0.20945564,-0.18716979,0.11141059,-0.40963784,0.042025935,0.31262034,-0.009530074,-0.07381225,-0.34168014,-0.46785125,-0.34054643,-0.8581417,-0.43096948,-0.96699804,-0.8030213,-1.4712517,0.79256195,0.4613127,
	};

	for(int i=0;i<num;i++)
		weight[i]=weight_init[i];
}*/
void bias_init(float *bias,double * bias_weight, int num){
	for(int i=0;i<num;i++)
	   bias[i]=(float)bias_weight[i];
}
void weight_init(float *weight,double * bias_weight, int num_base, int num){
	for(int i=0;i<num;i++)
		weight[i]=(float)bias_weight[num_base +  i];
}

void calculate_offset(int iter)
{

	volatile char *SHARED_DRAM;
	bias_offset = L1_NUM*L2_NUM+L2_NUM*L3_NUM;
	state_offset = bias_offset+L2_NUM+L3_NUM;
	exp_pool_offset = state_offset+L1_NUM;
	result_offset = exp_pool_offset+iter*BATCH_SIZE;
	SHARED_DRAM = (volatile char *)XFPGA_shared_DRAM_virtual();
	//SHARED_DRAM = (volatile char *)XFPGA_shared_DRAM_physical();
	SHARED_BASE = (volatile float *)(SHARED_DRAM);
    SHARED_BIAS = SHARED_BASE+bias_offset;
    SHARED_STATES = SHARED_BASE+state_offset ;
    SHARED_EXP = SHARED_BASE+exp_pool_offset;
    SHARED_RESULT = SHARED_BASE+result_offset ;
}

void copy_Initdata_to_dram(float *weight ,float *bias)
{
	 cout<<weight[0]<<endl;
	 cout<<weight[1]<<endl;
	 cout<<weight[2]<<endl;
	  memcpy((void *)SHARED_BASE, weight, (L1_NUM*L2_NUM+L2_NUM*L3_NUM)*sizeof(float));

	  cout<<((float*)SHARED_BASE)[0]<<endl;
	  cout<<((float*)SHARED_BASE)[1]<<endl;
	  cout<<((float*)SHARED_BASE)[2]<<endl;

	  memcpy((void *)SHARED_BIAS, bias, (L2_NUM+L3_NUM)*sizeof(float));


}

void copy_state_to_dram(float *state)
{
	 //cout<<((float*)SHARED_STATES)[0]<<endl;
	 memcpy((void *)SHARED_STATES, state, (L1_NUM)*sizeof(float));
	 //cout<<((float*)SHARED_STATES)[0]<<endl;

}

void copy_experience_to_dram(float *experience,int iter)
{
	  memcpy((void *)SHARED_EXP,experience, (iter*BATCH_SIZE)*sizeof(float));
}

void copy_ation_from_dram(float *action)
{
	  //cout<<((float*)SHARED_RESULT)[0]<<endl;
	  memcpy(action,(void *)SHARED_RESULT,(L3_NUM)*sizeof(float));
	  //cout<<action[0]<<endl;

}
/*
int main()
{
	//配置服务器IP和端口
	int PORT = 8088;;
	string  IP_ADDRESS ;//tolfkinglab wifi
	cout<<"please input PC server IP:"<<endl;
	cin>>IP_ADDRESS;
	if(IP_ADDRESS =="0"){
		IP_ADDRESS ="192.168.0.5" ;

	}
	cout<<"IP_ADDRESS :"<<IP_ADDRESS<<" PORT:"<<PORT<<endl;
   	client.ClientConnect(PORT, IP_ADDRESS.c_str());

	client.ClientRecv((char *)&RevBuffer, sizeof(RevBuffer));//从主机接收信息
	cout<<"Thread0:recv from PC |---| done1:"<<RevBuffer[AGENT_NUM*L1_NUM]
			<<"   done2:"<<RevBuffer[AGENT_NUM*L1_NUM+1]
			<<"   done3:"<<RevBuffer[AGENT_NUM*L1_NUM+2]
			<<"   done4:"<<RevBuffer[AGENT_NUM*L1_NUM+3]<<endl;
	memcpy(send_agent2_buffer,&RevBuffer[L1_NUM],L1_NUM*sizeof(float));//
	memcpy(&send_agent2_buffer[32],&RevBuffer[AGENT_NUM*L1_NUM+1],1*sizeof(float));//接受state2、done2

	memcpy(send_agent3_buffer,&RevBuffer[2*L1_NUM],L1_NUM*sizeof(float));//
	memcpy(&send_agent3_buffer[32],&RevBuffer[AGENT_NUM*L1_NUM+2],1*sizeof(float));//接受state3、done3

    memcpy(send_agent4_buffer,&RevBuffer[3*L1_NUM],L1_NUM*sizeof(float));//
    memcpy(&send_agent4_buffer[32],&RevBuffer[AGENT_NUM*L1_NUM+3],1*sizeof(float));//接受state3、done3
    done_all = RevBuffer[AGENT_NUM*L1_NUM+4];
    done1 = RevBuffer[AGENT_NUM*L1_NUM]==1? true:false;
    done2 = send_agent2_buffer[32]==1? true:false;
    done3 = send_agent3_buffer[32]==1? true:false;
    done4 = send_agent4_buffer[32]==1? true:false;

	cout<<"Receive first group of  data,and the first element of  RevBuffer is:"<<RevBuffer[0]<<endl;

	CServer server2;
	if(server2.initserver(9020)==false)  cout<<"port:9020 cannot connect."<<endl;
  	CServer server3;
    if(server3.initserver(9030)==false)  cout<<"port:9030 cannot connect."<<endl;
   	CServer server4;
    if(server4.initserver(9040)==false)  cout<<"port:9040 cannot connect."<<endl;

   	thread t1(agent1_func);
   	t1.detach();


	gettimeofday(&start,NULL);
   	while(!done_all){
   	   	gettimeofday(&middle1,NULL);
   		unsigned long  tt_s = (middle1.tv_sec  -  start.tv_sec)*1000000+middle1.tv_usec  -  start.tv_usec;
   		if(tt_s%10000000==0)cout<<"		Thread0:using time: "<<tt_s/1000000<<" s."<<endl;//每隔10s打印一次，防止死机
   		cout<<"Thread0:agent1!"<<endl;
   		while(!need_state1);
   		SendBuffer[0]=action;

		if(!done2){
	   		cout<<"Thread0:agent2!"<<endl;
			server2.Send((char *)send_agent2_buffer,sizeof(send_agent2_buffer));
	  		cout<<"Thread0:agent2 send!"<<endl;
			server2.Recv((char *)&recv_agent2_buffer,sizeof(recv_agent2_buffer));//接受动作信息
			cout<<"Thread0:agent2 recv!"<<endl;
		}

		if(!done3){
			cout<<"Thread0:agent3!"<<endl;
			server3.Send((char *)send_agent3_buffer,sizeof(send_agent3_buffer));
	  		cout<<"Thread0:agent3 send!"<<endl;
			server3.Recv((char *)&recv_agent3_buffer,sizeof(recv_agent3_buffer));//接受动作信息
			cout<<"Thread0:agent3 recv!"<<endl;
		}

		if(!done4){
			cout<<"Thread0:agent4!"<<endl;

			server4.Send((char *)send_agent4_buffer,sizeof(send_agent4_buffer));
	  		cout<<"Thread0:agent4 send!"<<endl;
			server4.Recv((char *)&recv_agent4_buffer,sizeof(recv_agent4_buffer));//接受动作信息
			cout<<"Thread0:agent4 recv!"<<endl;
		}

		SendBuffer[1]=recv_agent2_buffer;
		SendBuffer[2]=recv_agent3_buffer;
		SendBuffer[3]=recv_agent4_buffer;
		client.ClientSend((char *)SendBuffer, sizeof(SendBuffer));
		cout<<"Thread0:send to PC |--|  action1:"<<action<<" action2:"<<recv_agent2_buffer
				<<" action3:"<<recv_agent3_buffer
				<<" action4:"<<recv_agent4_buffer<<endl;

		client.ClientRecv((char *)RevBuffer, sizeof(RevBuffer));//从主机接收信息
		cout<<"Thread0:recv from PC |---| done1:"<<RevBuffer[AGENT_NUM*L1_NUM]
				<<"   done2:"<<RevBuffer[AGENT_NUM*L1_NUM+1]
				<<"   done3:"<<RevBuffer[AGENT_NUM*L1_NUM+2]
				<<"   done4:"<<RevBuffer[AGENT_NUM*L1_NUM+3]<<endl;

		memcpy(send_agent2_buffer,&RevBuffer[L1_NUM],L1_NUM*sizeof(float));//
		memcpy(&send_agent2_buffer[32],&RevBuffer[AGENT_NUM*L1_NUM+1],1*sizeof(float));//接受state2、done2

		memcpy(send_agent3_buffer,&RevBuffer[2*L1_NUM],L1_NUM*sizeof(float));//
		memcpy(&send_agent3_buffer[32],&RevBuffer[AGENT_NUM*L1_NUM+2],1*sizeof(float));//接受state3、done3

	    memcpy(send_agent4_buffer,&RevBuffer[3*L1_NUM],L1_NUM*sizeof(float));//
	    memcpy(&send_agent4_buffer[32],&RevBuffer[AGENT_NUM*L1_NUM+3],1*sizeof(float));//接受state3、done3
		need_state1 = false;
	    done_all = RevBuffer[AGENT_NUM*L1_NUM+4];
	    done1 = RevBuffer[AGENT_NUM*L1_NUM]==1? true:false;
	    done2 = send_agent2_buffer[32]==1? true:false;
	    done3 = send_agent3_buffer[32]==1? true:false;
	    done4 = send_agent4_buffer[32]==1? true:false;
   	}
   	cout<<"Thread0:ALL agents have accomplished their tasks!"<<endl;
	// close socket
	cout<<"Thread0:Client socket to PC will be closed."<<endl;
	client.ClientClose();
    return 0;
}
*/
