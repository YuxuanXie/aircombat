/*
 * Empty C++ Application
 * agent2
 */
#include <iostream>     // std::cout
#include <algorithm>    // std::generate
#include <vector>       // std::vector
#include <cstdlib>      // std::rand, std::srand
#include<sys/time.h>
#include <cmath>
#include <string.h>
#include <mutex>

#include"config.hpp"
#include "DQN.hpp"
#include"dqn_fpga.hpp"
#include"xfpga.hpp"
#include"shared_dram.hpp"
#include "client.hpp"
#include "memory.hpp"
#include "cclient.hpp"
//#include "xil_cache.h"
//#include "xil_printf.h"
using namespace std;
void load_prepared_weight(float *weight, const char *filename);
void bias_init(float *bias,double * bias_weight,int num);
void weight_init(float *weight,double * bias_weight, int num_base,int num);
int RandomNumber () { return (std::rand()%2); }
void generaterandnum(float *arr,int len);
float *ex_memory_Init(int batch,int state_n,DQN *DQNTEST);
void calculate_offset(int iter);
void copy_Initdata_to_dram(float *weight ,float *bias);
void copy_state_to_dram(float *state);

void copy_experience_to_dram(float *experience,int iter);
void copy_ation_from_dram(float *action);
float *hw_result = new float[L3_NUM+BATCH_SIZE+L1_NUM*L2_NUM+L2_NUM*L3_NUM+L2_NUM+L3_NUM];
float *hw_result2 = new float[L3_NUM+BATCH_SIZE+L1_NUM*L2_NUM+L2_NUM*L3_NUM+L2_NUM+L3_NUM];
float *matrix = new float[L1_NUM*L2_NUM+L2_NUM*L3_NUM];
float *inputvector = new float[L1_NUM];
float *eval_bias = new float[L2_NUM+L3_NUM];
float *target_matrix = new float[L1_NUM*L2_NUM+L2_NUM*L3_NUM];
float *target_bias = new float[L2_NUM+L3_NUM];
vector<float> rewardvector;
float *state = new float[L1_NUM];
float *next_state = new float[L1_NUM];
#define FPGA_COMPUTE 1
volatile float *SHARED_BASE ;
volatile float *SHARED_BIAS ;
volatile float *SHARED_STATES ;
volatile float *SHARED_EXP ;
volatile float *SHARED_RESULT ;
int bias_offset;
int state_offset;
int exp_pool_offset;
int result_offset;

float reward;
bool done=false;
float reset=1;
bool mode=0;

ClientNet client;
float action[1]={-1};
float RevBuffer[L1_NUM+1];//state ,reward,done

struct  timeval start;
struct  timeval middle1;
struct  timeval middle2;
struct  timeval endtime;

int main()
{
	int PORT ;
	string  IP_ADDRESS ;//tolfkinglab wifi
	int AGENT_ID;
	cout<<"please input agent server IP, port, agent name:"<<endl;
	cin>>IP_ADDRESS>>PORT>>AGENT_ID;
	if(AGENT_ID == 0){
		AGENT_ID = 2;
	}
	if(IP_ADDRESS =="0"){
		IP_ADDRESS ="192.168.0.111" ;
	}
	PORT = 9000 + AGENT_ID*10;

	cout<<"Agent_"<<AGENT_ID<<" IP_ADDRESS :"<<IP_ADDRESS<<" PORT:"<<PORT<<endl;

   	client.ClientConnect(PORT, IP_ADDRESS.c_str());
	client.ClientRecv((char *)&RevBuffer, sizeof(RevBuffer));
	cout<<"recv from agent1 |--| done:"<<RevBuffer[L1_NUM]<<endl;
	for(int i=0;i<L1_NUM;i++)
		inputvector[i]=RevBuffer[i];
	done = (RevBuffer[L1_NUM]==1)? true:false;


	cout<<"agent_"<<AGENT_ID<<" connected."<<endl;
    DQN *DQNTEST = new DQN();
    Memory memory;
    float *experience_mem = ex_memory_Init(DQNTEST->batch_size,DQNTEST->state_n,DQNTEST);
    int iter_n= DQNTEST->state_n*2+3;

    float LR=DQNTEST->learning_rate/DQNTEST->batch_size;

    DQN_info info (LR,DQNTEST->reward_decay,iter_n,DQNTEST->batch_size,0);

	string filename = "/home/root/weights.bin";
	FILE *infile = fopen(filename.c_str(), "rb");
	if (!infile) {
		cout<<"ERROR while open file:"<<filename<<endl;
		exit(-1);
	}
	int num = L2_NUM+L3_NUM+L1_NUM*L2_NUM+L2_NUM*L3_NUM;
	double bias_weight[num] ={0};
	fread(bias_weight, sizeof(double), num, infile);
	fclose(infile);
    bias_init(eval_bias,bias_weight,L2_NUM+L3_NUM);//偏置初始化
    weight_init(matrix,bias_weight,L2_NUM+L3_NUM,L1_NUM*L2_NUM +L2_NUM*L3_NUM);//权重初始化

    memcpy(target_matrix,matrix,(L1_NUM*L2_NUM+L2_NUM*L3_NUM)*sizeof(float));
    memcpy(target_bias,eval_bias,(L2_NUM+L3_NUM)*sizeof(float));

    if(!FPGA_COMPUTE){
    	/*send the weight data to PL*/
	    DQN_fpgatop(experience_mem,inputvector ,matrix ,eval_bias,hw_result,info,1,0,0);

	    /**inference ,get the Q value  from  evaluate network*/
	    info.batch_size=1;
	    DQN_fpgatop(experience_mem,inputvector ,matrix ,eval_bias,hw_result,info,0,1,0);


	    /** Train ,get the update date  value  from PL*/
		info.batch_size=DQNTEST->batch_size;
		DQN_fpgatop(experience_mem,inputvector ,matrix ,eval_bias,hw_result,info,0,0,0);

    }
    else
    {
	    DQN_fpgatop(experience_mem,inputvector ,matrix ,eval_bias,hw_result,info,1,0,0);

    	FPGA_DQN_core_Init();
		FPGA_setMemory(info.iter_n);
		calculate_offset(info.iter_n);
		copy_Initdata_to_dram(matrix ,eval_bias);
		send_weight_to_FPGA(info);

		copy_ation_from_dram(hw_result);
		fflush(stdout);
		for(int episode=0;episode<EPISODE;episode++)
		{
			for(int step=0;step<STEP;step++)
			{
				cout<<"*****************|||episode:"<<episode<<"  step:"<<step<<"/STEP"<<"|||******************"<<endl;
				action[0] = DQNTEST->choose_action_egreedy();
				if(action[0]==-1)
				{
					info.batch_size=1;
					copy_state_to_dram(inputvector);
					FPGA_DQN( info, 0, 1, 0);
				    DQN_fpgatop(experience_mem,inputvector ,matrix ,eval_bias,hw_result,info,0,1,0);
					copy_ation_from_dram(hw_result);
					action[0] = DQNTEST->calculateMaxOutput(hw_result);
				}

				client.ClientSend((char *)&action, sizeof(action));
				cout<<"send to agent1 |--| action:"<<action[0]<<endl;
				client.ClientRecv((char *)&RevBuffer, sizeof(RevBuffer));
				cout<<"recv from agent1 |--| done:"<<RevBuffer[L1_NUM]<<endl;
				for(int i=0;i<L1_NUM;i++)
					next_state[i]=RevBuffer[i];
				done = (RevBuffer[L1_NUM]==1)? true:false;
				memory.push(inputvector, next_state, 0, action[0],(float)done);
				if(memory.counter > BATCH_SIZE){
				   memory.generateRandomBatchdata(experience_mem);
				   copy_experience_to_dram(experience_mem,info.iter_n);
				   info.batch_size=DQNTEST->batch_size;
				   FPGA_DQN( info, 0, 0, 1);
				   DQN_fpgatop(experience_mem,inputvector ,matrix ,eval_bias,hw_result,info,0,0,0);

				}

				memcpy(inputvector,next_state,(L1_NUM)*sizeof(float));   //state = next_state

				if(done)
					break;
			}

			if(episode  == 200000)
			{

				float  total_reward = 0;
				float  ave_reward = 0;
				//	    # Test every 100 episodes
				for(int test=0;test<TEST;test++)
				{
					cout<<"**************"<<endl;
					cout<<"  test episode   "<<episode<<endl;
					cout<<"**************"<<endl;
					reset=1;
					mode=1;
					client.ClientSend((char *)&action, sizeof(action));
					reset=0;

					client.ClientRecv((char *)&RevBuffer, sizeof(RevBuffer));

					for(int i=0;i<L1_NUM;i++)
						inputvector[i]=RevBuffer[i];
					done = (RevBuffer[L1_NUM]==1)? true:false;
					for(int step=0;step<STEP;step++)
					{
	  		 			/**inference ,get the Q value  from  evaluate network	  		 			*/
						info.batch_size=1;
						copy_state_to_dram(inputvector);
						FPGA_DQN( info, 0, 1, 0);
						copy_ation_from_dram(hw_result);
						  // DQN_fpgatop(experience_mem,inputvector ,matrix ,eval_bias,hw_result,info,0,1,0);
						action[0] = DQNTEST->calculateMaxOutput(hw_result);
						//cout<<"inference current Q-Network,calculate MaxOutput, action-> "<<action<<endl;
						client.ClientSend((char *)&action, sizeof(action));
						client.ClientRecv((char *)&RevBuffer, sizeof(RevBuffer));
						for(int i=0;i<L1_NUM;i++)
							next_state[i]=RevBuffer[i];
						done = (RevBuffer[L1_NUM]==1)? true:false;
						total_reward += reward;
						memcpy(inputvector,next_state,L1_NUM*sizeof(float));   //state = next_state
						if(done)
							break;
					}
				}
				rewardvector.push_back(ave_reward);
			}

			if(episode%REPLACE_FREQ==0)
			{
				FPGA_DQN( info, 2,0, 0);
				cout<<"replace target Q network weight"<<endl;
			}

		}
    }
	// close socket
	printf("closing socket.....\n");
	client.ClientClose();
	for(unsigned int i=0 ;i<rewardvector.size();i++)
	       cout<<rewardvector[i]<<" ";

    std::cout<<"*************"<<std::endl;
    std::cout<<"*AGENT_"<<AGENT_ID<<" SUCCCESS!!!*"<<std::endl;
    std::cout<<"*************"<<std::endl;

    delete[] hw_result;
    delete[] matrix;
    delete[] inputvector;
    delete[] eval_bias ;
    delete[] target_matrix ;
    delete[] target_bias ;
    delete[] experience_mem;

    return 0;
}


void generaterandnum(float *arr,int len)
{
	srand(1);
	float ran_num=rand()%4;
	for(int i=0;i<len;i++)
	{
		arr[i]=ran_num;
	}

}

float *ex_memory_Init(int batch,int state_n,DQN *DQNTEST)
{
	int iter=state_n*2+1+1+1;
   	float *memory = new float[batch*iter];
//   	for(unsigned i=0;i<batch;i++){
//   		std::generate(memory + i*iter, memory + i*iter+state_n,RandomNumber);
//   		std::generate(memory + i*iter+state_n, memory + i*iter+state_n*2,RandomNumber);
//   		memory[i*iter+state_n*2]=10;                                         //reward
//   		memory[i*iter+state_n*2+1]=float(DQNTEST->choose_action_random());   //action
//   		if(i%2==0)
//   		    memory[i*iter+state_n*2+1+1]=0;
//   		else
//   			memory[i*iter+state_n*2+1+1]=1;	//done
//   	}
   	return memory;
}

void load_prepared_weight(float *weight, const char *filename) {
	// calculate size of input data
	int num = L1_NUM * L2_NUM + L2_NUM*L3_NUM;
	printf("CPU: Loading Input from File %s, %u kBytes.\n", filename,
		 num * sizeof(float) / 1024);

	// load binary data from file
	FILE *infile = fopen(filename, "rb");
	if (!infile) {
	printf("ERROR: File %s could not be opened!\n", filename);
	exit(-1);
	}
	fread(weight, sizeof(float), num, infile);
	fclose(infile);

}
/*
void bias_init(float *bias,int num)
{
	float bias_init[L2_NUM+L3_NUM]={0.61057264,0.1,0.1,-0.29374993,0.75335336,1.8853403,0.76312035,0.5854794,0.17001961,0.06396236,0.1,0.050028592,0.017495183,-0.43901485,-0.035975162,0.018914208,0.3752397,0.1,-0.4502899,0.061337683,-0.048922725,0.006060034,-0.31784835,0.1,1.3311714,0.079164304,0.068377435,0.1,0.3807523,1.8595582,0.069232844,0.068406984,1.7466159,-0.081888296,0.1,1.4473784,-0.47078657,0.1,0.1,0.08585395,0.1,-0.24834718,-0.61796325,0.05967918,0.1,0.29585811,-0.04247221,0.0330905,0.6705636,0.033356618,-0.28918958,0.78565264,0.08060619,0.05640509,-0.016739797,1.4262327,0.750579,0.032093257,-0.0058269408,0.014776863,0.1,0.1,0.039899357,0.7376368,
	-0.52990043,-0.4667529,-0.6439732,-0.10899114,-0.44214672,-0.4765513,-0.16635016,-0.27746418,-0.12042937,0.8887836};
	for(int i=0;i<num;i++)
	   bias[i]=bias_init[i];
}
void weight_init(float *weight,int num)
{
	float weight_init[L1_NUM*L2_NUM+L2_NUM*L3_NUM]={1.7853582,1.3237456,-0.7993868,1.1413906,-4.369623,0.8418808,0.42403656,-4.214432,4.9819226,5.2632847,1.510061,0.72639,-4.113868,0.29936573,0.8512983,-4.3451414,3.6772876,3.9489746,1.9932309,0.3291122,-4.199221,0.4136326,0.11147557,-4.328441,2.7764523,3.359516,0.18901886,0.75778955,-3.8513947,1.2589132,0.23472568,-3.8586955,0.133187,0.116075695,-0.10244637,-0.25142184,0.12705117,0.47248912,-0.5402705,-0.21141721,-0.2663505,0.11632385,-0.5836366,-0.27890468,0.32413977,-0.033493493,0.05122316,-0.16307542,-0.24982734,0.2960426,0.093812525,0.38337043,0.016721282,-0.0769916,-0.0646289,-0.53064084,-0.21816032,0.02691144,-0.12945962,-0.1529054,0.11452625,-0.21698399,0.12505358,-0.013549474,-0.16924492,0.41012028,-0.19832349,0.41082114,0.20114312,-0.22130318,-0.11221355,0.14377555,-0.07801037,-0.4394992,-0.15046525,0.3720826,0.5137359,-0.60776114,0.07606125,-0.83139724,0.07379509,0.4605849,-0.03333192,-0.4583766,-0.032607995,-0.6345493,0.07440722,0.01842299,-0.5517708,0.18500097,0.043300703,-0.22221668,-0.4270393,-0.17024416,-0.024178306,-0.1373899,0.1287669,-0.32507285,2.917831,-1.3847488,2.2320237,-0.8050356,-0.4772036,1.1595392,7.259397,7.3636484,5.1408463,-1.4708095,1.4720263,-0.13401315,-0.7729546,1.4097283,2.6869252,2.5601337,4.680997,-1.4499085,1.9961294,-0.56119144,-0.5230013,2.0290697,0.88035727,0.09353803,2.8646421,-2.1693892,2.0280476,-0.39259362,-0.17994393,2.0602381,1.9760245,1.7756975,-0.424725,0.93548703,-4.792152,0.56254816,0.27930367,-5.046663,5.5184283,5.196033,2.2926927,1.0069153,-4.9422126,0.4609133,0.75315166,-4.698503,3.3022218,3.465849,2.39952,1.0158129,-4.964724,1.1216701,0.6393695,-4.810407,3.4237828,2.7797358,1.3267243,0.9911115,-5.131559,0.8065573,0.32930374,-4.6269317,2.2373493,2.6643739,-1.2256485,3.647398,-0.53120804,1.8839903,1.7808896,-1.2715898,-4.675305,-3.992556,-2.835434,3.7856221,-0.7130493,1.4857991,2.0335796,-0.61918116,-0.6414854,-0.38321874,-2.4353116,4.0322833,-0.74708736,1.3498099,1.8145026,-0.8113617,1.3355459,1.360501,-0.57963824,3.5060453,-0.6548697,1.8783057,1.8814427,-0.9577917,1.81532,1.5608212,-0.48887092,1.4746262,-5.0412188,0.5944449,0.7401963,-5.1598997,5.3770986,5.49758,2.1752298,0.91282296,-5.158823,1.1109627,0.6717476,-5.39087,4.0463734,3.9211378,2.7100112,1.1283834,-5.454809,0.6036352,0.56050974,-5.2899847,3.1201851,2.8995512,0.6839861,1.0511383,-5.4957314,0.6940346,0.64321,-4.6764355,1.4155865,1.027088,-0.4457843,1.8952867,-4.576061,0.6093648,0.09225062,-4.8903804,4.3142743,4.6871266,1.5287333,1.7636738,-4.623282,0.8512184,0.78075516,-5.0964828,3.03316,2.5586634,2.8409767,1.7748979,-4.6237817,0.3037544,0.369624,-5.0037932,2.571976,1.9383976,1.1908921,1.5597396,-4.5485587,0.79844564,0.3340768,-4.852816,2.5545375,2.9448516,2.1095283,-5.468832,0.71603316,0.47809595,0.028608438,0.20554079,3.1592493,3.1024885,3.200515,-5.963699,0.46769577,0.3383546,0.85987943,0.88299483,2.4810479,1.7054017,2.825484,-5.5076203,0.520658,0.45859373,0.41161725,0.53542244,1.8566741,1.990484,2.0315263,-5.3779297,0.11414653,0.18636441,0.0575947,0.26220015,-0.09754314,-0.14460643,-0.060682777,-0.23838384,-0.0145421475,-0.015534246,-0.115671165,0.16936636,0.8031141,0.10581367,-0.051514897,-0.4668761,0.13307184,-0.3938409,-0.3098067,-0.73242974,0.3506758,0.31386086,-0.17022155,-0.25605056,-0.15824899,-0.31658268,0.45542735,0.012124425,-0.14629579,0.057375982,0.5664334,-0.032878254,0.20201668,-0.13522485,0.028111903,0.16866183,0.08943408,-0.43730712,-0.14441076,0.17693889,0.079253264,0.14870888,0.10470295,0.12837256,0.30883482,-0.014249701,-0.014369663,0.029911203,0.13117048,-0.30934453,-0.030493937,-0.38560322,-0.10035895,-0.08233038,-0.2745229,-0.5471347,0.0034529031,-0.14384519,-0.1815045,0.13904333,-0.094527386,0.4662448,0.021592861,0.23147969,-0.16169974,-0.33993542,-0.10009268,0.37883624,0.23520853,-0.33742017,-0.04798805,-0.5734822,0.051241823,-0.40404773,-0.107366204,0.14340842,-0.22537646,-0.08429757,-0.1194897,0.29310793,0.09250594,0.23802175,0.17053095,-0.35956275,0.32883102,-0.418154,-0.16709661,-0.3937964,0.47731236,-0.46259463,0.19964418,-0.22285196,-0.628636,0.4898073,0.011223219,-0.14957179,-0.11863864,0.16632389,-0.14796075,0.48607326,0.14713985,-0.40267336,-0.08047601,-0.28109968,-0.5798066,-0.04290098,-0.42013657,-0.14770086,0.36252263,0.026572969,-0.5328103,0.063115105,0.70753616,0.040280834,0.102612056,0.27986586,0.27903435,-0.49715146,-0.081250146,0.037667688,-0.1309386,-0.28034765,0.19327918,-0.0010184795,-0.20082161,-0.66303074,0.3467464,-0.66773736,-0.3661648,0.11947362,-0.03541381,-0.40442604,1.977829,1.613117,0.17792922,-0.4628125,-0.059592225,-0.26925626,-0.68222004,-0.6406729,1.1270165,0.9674267,2.2077403,-0.38815272,-0.70897484,-0.6125087,-0.6905847,0.39202386,1.0083855,0.86171997,1.4869552,-0.047683977,-0.2671037,-0.0149772875,-0.7114572,-0.1422442,1.417158,1.0152091,0.38494417,0.12366102,0.13550094,-0.5075113,-0.43014908,-0.10827272,0.41904676,-0.44709697,-0.3063235,-0.0578439,0.12100096,-0.40970644,-0.28882614,-0.54899454,-0.070072055,0.19299579,0.32335302,0.019373536,-0.17851414,-0.15059616,0.019520404,0.19476163,0.124485776,-0.29790032,-0.12845245,0.39911625,0.08929571,0.3963099,-0.26443547,-0.78274775,-0.07494052,-0.017637704,0.17850225,0.4476208,-0.3001501,-0.3511361,-0.17237121,0.22324558,0.020734508,-0.0021618803,0.06665853,-0.24510418,-0.13506173,-0.017417736,-0.11017744,-0.046932083,-0.09207411,0.14503077,-0.52816635,0.10720526,0.054139312,-0.26118016,-0.25420204,-0.07551374,-0.19768286,0.23309027,-0.20354536,0.15991911,-0.25134316,-0.28722996,0.5120662,-0.17439413,-0.28982458,0.4303612,-0.016723623,0.055040635,0.15525006,-0.17456493,0.3104922,0.28501296,1.3224646,1.4264766,1.2164139,-0.6619995,-2.1360486,0.111146286,0.71621704,-2.3949854,6.931147,6.48361,4.2962837,-1.2857534,-2.3355114,0.46157658,0.25094512,-2.5142677,4.424742,2.9148996,4.1884847,-0.94233596,-2.5471842,0.7441871,-0.48640814,-2.2547061,2.4841807,2.11714,1.4133289,-0.7957067,-2.1651633,0.11706145,0.40032142,-2.6936252,-0.26513842,-0.044377435,-0.6642006,0.13561381,0.29303822,0.40808365,-0.2199792,-0.35077623,0.072664276,-0.47186804,0.34797075,0.09295248,0.0006116421,-0.6793551,0.074402764,-0.4966086,-0.41689193,0.23083933,0.05460283,-0.4223091,0.060426578,0.06776292,-0.299984,-0.08262743,0.09436135,0.34580755,-0.43757692,-0.2867645,-0.60965925,0.45271552,-0.0005933279,-0.50546885,1.9541256,1.732303,1.0100298,0.14278139,-0.5722628,-0.85410166,-0.7802997,-0.4341364,1.4562724,1.5124345,1.611176,-0.056092374,-0.17198724,0.109781004,-0.6864905,-0.16322102,0.94858295,1.2607741,1.6275313,-0.25271258,0.059535556,-0.51136917,-1.3742408,-0.47561747,1.5744278,1.4391255,0.30259106,-0.3477102,-0.48361874,-0.13472174,-0.302608,-0.07361638,-0.2965119,0.19610044,0.25704047,-0.09582534,0.4511348,-0.086642876,-0.12862442,-0.18815692,-0.13997293,0.14855419,-0.29117677,-0.15554285,0.2704149,0.031785786,-0.29052836,-0.095237106,-0.18116455,-0.32360741,0.13395536,0.13776723,-0.038856156,0.103417374,0.269516,-0.10449563,-0.31720418,-0.13541192,0.3561133,0.106666215,-0.07854585,0.0419946,-0.34892458,-0.20399544,-0.23485012,-1.3269755,2.8778496,-2.6659045,2.1712635,-0.17351653,-0.71744895,2.2526996,6.1740017,6.388809,5.05126,-2.541866,1.9607435,0.34253004,0.3446829,1.9540471,2.0443156,1.1838324,3.5161605,-3.0075467,1.886995,-0.31722525,-0.7257577,1.5621814,0.5106922,-0.66774493,1.7127851,-2.8152785,1.6011685,-0.30973086,0.064292885,1.7018002,0.0709313,0.33781135,-0.3390354,0.5169699,0.023427946,-0.39411604,0.25126493,0.2960199,0.4174033,0.399655,-0.084328175,-0.15607503,-0.41208,-0.58721536,0.037298054,-0.38960853,-0.46830907,-1.1064255,0.07438376,-0.28805304,0.25694644,0.33971933,-0.50040185,-0.36221838,0.28363037,0.61111087,-0.16946535,0.5325968,-0.16336557,-0.13863032,0.05987578,0.4245962,0.10084775,-0.17970394,-0.9180695,0.18175155,-3.0289063,0.09871648,-0.014086107,-3.3075361,0.6048896,0.43199834,0.94738495,0.11250505,-2.8538318,-0.75455904,-0.11333673,-3.733931,0.9248121,0.73827773,1.9704065,0.046613112,-2.7479734,0.014836423,-0.05455707,-2.7152662,1.3707416,0.7379719,0.4703125,-0.41373956,-2.9262638,-0.70562255,-0.5255301,-3.0011053,0.6184436,0.10853368,-0.03024453,-0.30471495,0.12686595,-0.3702387,-0.12418365,0.34978157,0.6050273,-0.037583068,-0.54400223,0.028547505,-0.61923087,-0.2537874,0.038088523,-0.22096787,0.42373374,0.047995098,-0.039078187,-0.19608143,-0.14804034,0.17088272,-0.67012465,-0.23517762,-0.025492985,0.3169267,0.43193677,-0.2376824,-0.5017605,-0.33253944,-0.31246406,-0.5013026,2.741351,3.3024354,-1.3243494,2.6452541,-1.0549691,1.4263488,1.8675345,-1.3424416,-2.8991807,-3.3949003,-3.1785893,2.825259,-1.1649101,1.2794718,1.0863801,-1.0008049,-0.9925001,-0.60230964,-3.0826235,2.8083088,-1.0558422,1.3094555,1.1576272,-1.4211078,1.1329415,1.3521188,-1.3242514,2.5504227,-1.3706911,1.0983592,1.0673488,-1.2703238,0.04547232,0.04449256,-0.29065982,-0.008097592,0.52179456,0.010821135,-0.09935502,-0.04847919,0.025028406,0.0357121,-0.0020306595,-0.26656443,-0.05416358,-0.2168441,0.021624206,-0.20280136,0.12806849,-0.12333208,0.23415545,-0.19610654,-0.03277143,0.252911,0.16478656,-0.4058079,0.14462955,-0.42564395,-0.06573191,-0.10291668,0.019694865,-0.2121233,-0.21891047,0.120205335,-0.24928345,0.34640488,-0.3877126,-0.06493144,-0.6217435,0.13200592,-0.68717295,0.0056017824,0.08425553,0.49355733,-0.0326465,-0.07108311,0.16743845,0.26104623,-0.56529796,0.7230733,0.5730493,0.23479612,-0.20766881,0.003539376,-0.13170406,0.058302235,0.057426553,-0.16676153,-0.45694333,0.33375353,-0.05633589,0.03828716,-0.5544347,0.2731947,0.10432586,0.15764631,-0.08978777,-0.06690278,-0.026051879,-0.035037916,-0.5543085,0.11595947,-0.22859758,-0.64029366,-0.061776467,-0.25104856,-0.07022454,0.2296505,-0.010219421,0.45526335,-0.12956847,0.2343622,-0.041561075,-0.33347628,-0.41497034,-0.6701391,-0.51106006,-0.26307446,0.25311664,-0.27750573,-0.37134808,0.29911768,-0.099856846,0.1282535,-0.48383406,0.25736257,-0.19573547,0.17041089,1.4794285,0.49538407,1.979751,-6.397902,1.3514692,0.68836975,0.39021513,0.44028243,4.2388883,3.884947,3.8694055,-6.5513134,0.90400827,0.3882377,0.080253094,0.37230578,1.886416,1.7724463,3.088378,-6.649453,1.0024632,0.94521856,0.41293368,1.5407888,-0.1444439,-0.020308042,1.8361061,-6.3812814,0.8694179,0.39048856,0.24012962,0.6001965,2.7608423,2.5133638,-1.1242074,4.163226,-1.9422897,1.844067,1.3652498,-1.1915265,-6.1374435,-7.105285,-4.5952053,4.4412546,-0.8739464,2.29345,2.0554233,-1.8894559,-1.4172472,-0.8072939,-3.5187447,4.8073373,-0.9652406,1.9353477,1.9066457,-1.1685778,1.8401479,2.511468,-1.4582009,4.3274364,-1.3806883,1.5057482,2.0752013,-1.5495449,-0.07588808,0.32241523,-0.45360082,0.08529606,-0.32896826,0.48137915,0.026456619,0.14107136,-0.23247406,0.0017087876,-0.061978716,-0.057112858,0.060181227,0.18984875,-0.015936008,-0.28262162,-0.11640616,-0.38240564,-0.49131814,-0.44850022,-0.0128412675,-0.17456095,0.018311916,0.0071346126,0.032006867,-0.37347043,0.19155905,0.06365141,0.29248494,-0.06933274,-0.4977664,-0.29210547,-0.53878677,-0.2697944,0.41213325,-0.35978127,-0.59664285,-0.02272205,-0.314748,-0.6455708,-0.5584727,0.077778876,-0.029731903,0.076970026,-0.053324744,-0.3831412,-0.2753024,0.2963409,-0.31226474,-0.16750404,-0.07102658,0.24025998,-0.3636139,-0.22973864,0.25915754,-0.21623138,0.72198206,-0.41542998,-0.42724484,0.3905115,0.29198277,0.5914513,-0.038160793,-0.03489307,2.0866284,2.7473629,-0.58075523,4.0041113,-1.0017599,2.0851953,2.0327399,-0.58337575,-4.4506345,-4.077898,-2.4812663,3.2956069,-1.1231854,1.4113743,1.6551328,-0.5541653,-1.0962999,-0.8831998,-2.1857784,4.3781457,-0.6017266,2.3335838,1.5659292,-0.80851275,0.927671,1.0481323,-0.4910503,3.0669823,-0.80557054,1.9537077,1.7561224,-0.24412733,1.6224589,1.1513159,0.62230605,0.07316125,-0.28834218,0.054078706,-0.90868896,-0.22559428,4.381255,4.651892,2.2976096,-0.2040298,-0.78857106,-0.31276956,-0.5915455,-1.0588696,3.472046,3.5319815,2.347462,0.2977234,-0.4955847,-0.17347273,-0.38824657,-0.7991151,2.9757817,3.0305948,0.81010234,-0.063248426,-0.8979854,0.41367623,0.09009945,-0.5840574,-0.27810106,-0.40237004,-0.042061746,0.28511903,-0.23362902,-0.123126306,0.32685164,0.39929393,0.07426954,-0.3728443,-0.13080369,0.03280791,0.063275635,-0.27669853,0.13269791,-0.23730016,0.3272287,-0.004153038,0.28041074,0.03772777,0.23486295,-0.6224086,0.5305202,-0.10871693,-0.03375192,-0.66344225,-0.55748403,-0.15196069,-0.11052302,-0.15004236,-0.3697123,0.25238854,5.3636208,4.9762425,0.42172807,2.3880267,-1.3688183,1.4257833,1.2785647,-1.6562817,-0.011658803,-0.36382937,0.88619566,2.754483,-1.4639525,1.3193363,1.1633251,-1.4030795,2.0729537,2.6475616,0.37785316,2.607828,-1.2949789,1.4162468,1.1837587,-1.7105675,4.578798,4.20058,-0.21333934,2.6432645,-1.5537968,1.7684497,1.2864401,-1.0977452,1.135799,0.81471914,0.45673662,-0.012686634,-0.37916568,-0.4299957,-1.3426061,-0.0049655885,1.2806621,0.7296137,1.6765702,0.10778719,-0.20748024,-0.2136884,-0.5840355,-1.0072968,0.80023676,0.24934672,1.1455451,0.4292355,-0.47797644,-0.77790284,0.19728263,-0.14846143,0.5687224,0.90694964,0.56658274,0.27864632,-0.27359346,0.0036925226,-0.396609,-0.44951445,0.21750192,0.071157664,0.11220064,-0.25196338,-0.07057502,-0.108225025,0.09133805,-0.3031441,-0.20712794,-0.20298456,0.37834868,-0.05757286,-0.059810486,-0.13416685,-0.53935677,-0.391454,0.019013997,-0.21429993,0.07360667,0.71795166,-0.09987698,0.07589681,-0.42300096,0.12425176,0.29626852,0.35292235,0.30308342,-0.43007728,-0.49434215,-0.7416195,0.45890704,-0.23373984,0.29768565,-0.007532066,-0.2642202,-0.055749703,-0.0318746,0.26709223,0.40727237,0.08579628,-0.8639393,0.18406004,-0.19840145,-0.22831254,-0.017685888,-0.21800242,-0.232835,-0.2664205,-0.41322654,0.34813148,-0.17752463,-0.41666785,0.080641165,-0.38233182,-0.11086493,0.19685109,0.45567736,0.7369342,0.10378268,-0.2946586,-0.094921015,0.2623466,0.09844416,-0.19541812,-0.03152256,-0.039116926,-0.14209712,-0.08650073,-0.5425688,0.60995674,0.20721385,0.0002009233,-0.11504347,-0.51201636,0.039209638,-0.8271217,-0.12675662,-0.07960625,0.20644535,-0.3121023,0.40360963,-0.288238,-0.09859329,-0.745243,-0.5681437,-0.47433022,0.032123685,0.21715212,-0.084256716,0.36363593,0.19798133,-0.104477875,0.016437499,-0.13034916,-0.11442374,0.18323646,0.022166653,-0.21904424,0.44548765,0.017460546,0.15149991,0.14980944,-0.110434964,0.08654386,-0.4907235,-0.036113158,-0.076430246,-0.083837785,-0.34520042,0.0046684337,-0.37910417,0.21401058,0.37388125,0.6373128,-0.10053176,0.2459382,-0.10390519,-0.7034652,0.12149046,-0.3661133,-0.39017573,-0.32550928,0.47745112,0.02596012,0.18560833,0.24340503,0.06908604,0.53803235,0.6516469,0.2616409,-1.0419992,-0.054233804,-4.0282903,-0.048185643,0.035173014,-4.664314,0.95981497,0.97315973,-0.047971226,-0.10242166,-4.5324483,-0.6371164,-0.55987555,-4.552198,1.1658455,1.7412034,1.4184395,-0.86670625,-4.87781,-0.4263686,-0.26904634,-3.887639,1.7876962,1.440701,-0.17759678,-0.22545594,-4.594727,-0.27989912,0.010563659,-3.8347502,0.98326945,0.39435562,1.720336,-1.9132799,1.2044419,-0.30167392,-0.42101198,0.45908737,3.4194856,2.8820508,3.0484557,-2.2026331,0.81612164,-0.54695797,-0.94217914,0.18606822,0.47497723,-0.14356814,2.108258,-2.5613968,0.5132646,-0.5945783,-0.8892415,0.7154259,0.30431423,0.18762262,0.5983451,-1.7590922,0.7075353,-0.7403728,-0.8171875,0.22571707,0.56035966,-0.10077274,0.025610914,0.004610477,-0.29526973,-0.033624485,-0.25695294,-0.3893185,0.38238993,0.09253083,-0.011958737,0.20267507,0.41070825,-0.43969965,-0.44551533,0.26259112,-0.42393145,0.105966724,-0.1378606,0.2724735,-0.14061786,0.2685445,-0.12873065,-0.2813588,-0.1855933,-0.3860779,0.23014386,0.16065359,-0.2969483,0.35133123,-0.48359567,0.10183433,0.76587236,0.28277862,-0.6279944,-0.04405984,0.30206668,-0.7604286,-0.3884547,-0.46017385,0.1086665,0.6057042,-0.23750551,-0.62890613,-0.12175285,0.021503642,0.48589465,-0.14723857,0.41659436,0.013613852,0.06283294,0.20901962,-0.30945733,0.26424038,-0.22416241,0.5549251,-0.58579457,-0.22428666,0.034536906,-0.077436745,-0.41951296,0.11397051,-0.31463218,-0.4048674,1.5693313,1.8885537,0.5080967,0.5566117,-3.9959586,-0.18206532,-0.26300785,-4.0003624,1.8876854,2.4110081,2.164995,0.15905422,-3.567047,-0.39542967,-0.09572397,-3.5711994,2.882051,2.2136807,2.321644,0.26842085,-4.2767787,1.0232413,0.5435426,-3.9703066,2.7606091,2.2584028,0.44565678,0.6819245,-3.5850778,0.29903358,-0.15105641,-3.840013,0.5090792,0.44961098,-2.1645744,1.0526136,-1.5606853,-0.10820573,-0.28305006,-0.65652466,-2.7987187,-2.392827,-3.2854216,1.0362923,-1.0834364,-0.13273306,-0.0952201,-1.6605159,-0.21909182,-0.8128705,-2.4549348,1.0254292,-1.2795829,0.02871115,0.12938033,-2.1248617,-0.5305071,0.33315802,-1.060367,0.7091335,-1.345862,0.30555978,-0.10257896,-1.4485925,0.22470447,0.13655913,-0.42125833,0.1441885,-0.36933106,-0.40621912,-0.11122356,-0.2603078,-0.28716475,0.46974283,-0.17393085,-0.018880218,-0.30501282,-0.49518353,0.06834796,0.22321896,0.44301647,-0.67405117,0.9244725,0.24798433,0.04164466,-0.28381306,-0.4063305,-0.1480855,0.45167992,0.25671542,0.48673487,0.2759392,0.06555393,-0.10233808,-0.05096793,0.12159775,1.4952717,0.750172,1.1091553,-0.7853312,-3.8019736,0.41955706,0.9247216,-2.853299,6.240778,6.2268248,3.3880668,-1.2832364,-2.9466913,0.6506862,0.86597526,-2.8673885,3.6667209,3.8632114,4.423785,-1.6338265,-3.4054658,0.4228194,0.85426784,-3.112683,2.2966924,2.087998,1.8001338,-2.0181224,-3.1133616,0.5829888,0.4224064,-3.0252273,-0.3235606,-0.8949707,-0.93271095,0.3855392,0.17350559,-0.310037,0.0010727885,-0.13318408,-1.5149925,-1.0454692,-1.6644206,0.5696857,-0.13785015,0.44352564,-0.30918336,-0.17571256,-0.95819443,-0.50686896,-1.4146354,0.41036838,0.26667693,0.13212273,0.305117,-0.2675966,-0.5994327,-0.18813637,-1.0837002,0.8040108,-0.023652015,0.0739778,-0.5675011,-0.13232206,-1.7987868,-1.5098218,2.2297866,-1.3193564,2.004946,-0.173258,-0.31033522,1.907645,5.6896715,5.230258,4.3593025,-1.92441,2.541618,-0.6375957,-0.55207723,2.1178658,1.9704976,1.4064261,3.7897632,-1.7420826,1.7205808,-0.30386755,-0.1347229,2.392454,-0.07562681,-1.0788691,2.3810241,-1.3956113,1.6316915,-0.65879565,-0.35391653,2.270353,3.202622,3.5772815,-0.5130722,1.5151788,-3.7106035,0.7248003,0.79273367,-3.3517268,3.0337808,2.8895335,0.43093354,1.524251,-3.7317202,0.07250179,1.0876335,-3.6712224,2.9747396,3.2471642,0.8256492,1.9343686,-3.3001745,1.0696167,1.1148075,-3.9125888,3.9398577,3.100545,-0.15357412,1.6588824,-3.396034,0.32072887,0.6116226,-3.7931526,0.03348247,0.22036688,0.034898475,-0.14806014,-0.15934214,0.463593,0.10196735,0.23995516,-0.39687294,-0.19062306,-0.29641238,0.07279846,0.035729226,0.11091363,-0.11033413,-0.12389909,0.1497958,0.31594256,0.616673,-0.0012017614,-0.34376,0.072397985,-0.37445623,0.2204293,-0.24413149,0.38936177,-0.037877016,-0.25675267,-0.15649688,-0.14078152,-0.21896946,0.39759642,-0.15093525,-0.04953467,0.21173753,0.57265025,-0.30193087,-0.17690629,-0.5472069,0.13595465,-0.05879823,0.6112679,0.26959053,0.06684083,-0.24447438,0.26323333,0.043572523,-0.3494914,-0.12938781,-0.083737716,-0.21422392,0.1495614,-0.09710142,-0.34903207,0.02779468,-0.09664726,0.118863374,-0.36514607,0.32936504,0.3637729,0.23841402,-0.40455574,0.1342547,-0.82047355,0.19907528,-0.49011257,0.21050733,0.083049536,-0.65719074,-0.26775098,0.0391191,-0.40614882,0.3163954,0.023641009,0.075988784,0.14520524,-0.38289648,0.575363,-0.059427,-0.17241473,-0.04182637,-0.29924563,0.26696265,-0.4523069,-0.0696139,-0.100392655,-0.18527383,-0.61907643,0.00784819,-0.14893286,-0.14600483,0.039077923,-0.04728769,-0.16099249,-0.36347082,0.40606377,4.699426,4.8604493,-0.22562586,4.61804,-1.4632107,1.5225556,1.6239184,-1.8615948,-5.643309,-6.0320306,-1.9680274,3.6541667,-1.7973355,1.035881,0.8291734,-1.6972817,0.053062543,-0.21793441,-1.3169562,4.6430106,-1.9113611,1.1728847,1.5808688,-1.8078963,2.7407403,3.1995993,-0.23234484,5.1462374,-1.485679,1.1438172,1.3201205,-1.7183074,5.0103855,4.5137014,0.6970901,2.428271,-3.068436,0.9335228,0.39049318,-3.073179,2.0894332,2.0693383,0.8427691,2.4086773,-2.5610611,0.51128495,1.1816039,-2.5702045,1.9474198,1.403927,0.939548,2.201572,-2.5540898,0.6604792,0.49277744,-3.0122578,3.6215582,3.048017,0.6094651,2.1974576,-2.8130963,0.47612488,0.6673864,-2.1486738,0.5778692,0.4812792,-0.3233321,-0.118673764,-0.2433185,-0.33632874,0.27189434,0.46573794,-0.35099575,-0.16275789,-0.6041173,0.15493762,-0.55538064,-0.53237945,-0.30206728,-0.281313,0.5253835,-0.4211779,-0.25726599,-0.5568812,0.14008912,0.29512206,0.07591945,-0.5187807,-0.080105826,0.19689779,0.09786068,0.027768102,-0.27000582,0.11547886,0.03607554,-0.014208602,0.20895664,-0.07407897,-0.10418165,0.09755273,0.2839854,-0.014151773,-0.48367262,-0.2105807,-0.10195689,0.24526602,0.07712993,0.30507222,-0.08944935,0.004972296,-0.02094568,-0.7121963,0.2811845,-0.20172939,0.11815859,0.7988923,-0.55512726,-0.25688422,0.039765514,-0.23949778,-0.23260686,0.23301527,-0.019879539,0.07532391,0.43589577,-0.11723498,-0.55497956,-0.6269126,-0.05370424,-0.1843374,0.07454325,0.21909478,-0.021135788,-0.03594151,-0.5106419,-0.5820282,0.044671975,0.22363716,-0.33177084,-0.81924796,0.23497799,0.60036063,0.22633898,0.34203637,0.057849728,0.16485906,-0.2863466,0.11434992,-0.7544168,0.06866554,-0.4989569,-0.005467486,0.027371874,-0.30530626,0.011039585,-0.14528719,0.049140133,0.4086542,-0.18081647,-0.07212986,0.15715674,-0.5095941,-0.27660635,-0.55638593,-0.44512472,-0.025567813,-0.51989377,0.32670575,-0.024698393,-0.16713394,-0.13754724,-0.54102314,-0.36250007,-0.30014896,0.18911783,-0.46560636,0.25843698,-0.8118681,0.025194826,-0.2864087,0.41042295,-0.09259595,-0.14633246,0.0866235,-0.5214895,0.25853783,-0.36358976,-0.2962763,-0.38442007,-0.28065628,-0.05839322,0.47590706,-0.21916619,-0.23269303,-0.46850008,-0.504467,-0.16243143,-0.4332755,0.08973651,0.12700333,-0.25188714,0.10975436,0.09399936,-0.1093479,-0.13294293,0.016917752,0.017922321,-0.07344672,-0.2163928,-0.3756231,0.29024014,-0.59174263,0.060299385,-0.02372209,0.38305202,-0.2502801,-0.14123529,0.026753685,-0.22533385,-0.0060320245,-0.367572,0.0010735715,-0.052851997,0.2719128,0.03394578,0.03323134,0.40910468,0.12127398,-0.27143404,-0.1920991,0.038163267,-0.089337036,0.11032826,-0.19708836,0.120798364,-0.78760076,-0.19777375,0.03910084,-0.13326725,-0.049555846,0.044034675,-0.6776919,0.05191933,0.032203533,-0.16366671,-0.01234833,-0.6354813,0.30775508,-0.21208236,-0.27153918,-0.08555584,0.6131728,-0.17265373,0.5628778,-0.039847545,-0.0067517404,3.5875378,2.894013,0.8987829,1.995787,-3.0606337,0.26703507,0.9219978,-2.5016718,0.8740041,0.75216514,1.5411304,1.6768168,-2.677606,0.44309592,0.90131724,-3.0682745,2.0046432,1.7142195,1.4843343,1.9086797,-3.3789887,0.6950297,0.7670307,-2.9618077,3.0580714,2.71286,0.46982902,1.7534713,-2.6994696,0.7732728,0.8782759,-2.3715515,
			-0.29698497,-1.0282336,-1.2041696,-1.2113467,-1.8292603,-1.416508,-3.3670304,-1.4047354,-5.906174,-2.839792,-0.3670626,0.13741682,-0.24151547,0.181984,0.12066766,-0.09371417,0.33142203,-0.4254542,-0.051484145,0.26972947,-0.17315125,0.07519998,0.09948896,0.43460664,0.20398358,-0.1440304,-0.3812246,-0.25463584,0.09072408,0.2638632,-1.317222,-0.61985284,-0.7589721,-0.6233305,-0.64717203,-0.72242105,-2.9595392,-0.29243487,-5.4542165,-3.5356994,-0.54204965,-0.28104466,-1.2311441,-0.64185774,-0.9333047,-0.49837378,-1.7994165,-0.28214538,-5.1085954,-3.8374255,1.0874772,0.9536001,1.1181148,0.77252483,0.8688882,0.96383727,1.5420771,0.95753634,1.7008746,2.1028874,-0.58369184,-0.0854202,-1.0165479,-0.4228144,-0.6354248,-0.72034264,-2.3802352,-0.6999354,-5.9431353,-2.8145936,-0.21936107,-0.7802957,-0.3838346,-0.22601168,-0.5954736,-0.57452035,-2.0069022,-0.35635144,-6.2448583,-3.397852,-0.23247159,0.5027779,-0.6632962,-0.09119123,-0.711582,-0.14799213,-1.4030765,-1.0786854,5.492774,-3.551701,-0.3080959,0.3934024,0.20708197,-0.2356096,-0.36382112,0.06013467,0.12856774,-0.52732027,0.32294083,-0.050919227,0.2957819,0.056063883,-0.32481095,-0.27187186,0.07851173,-0.6510946,-0.3892053,-0.84663206,-0.046359353,-0.1473661,0.5292364,0.31286666,-0.2700129,0.050179012,0.20086361,-0.16722766,-0.43975607,-0.19800922,-0.1526756,0.7014625,0.34050658,0.55148184,0.3914333,0.051004197,-0.49000436,-0.5102468,0.0855074,-0.72545636,0.42842504,0.39975005,-0.83956987,-0.4957568,-0.65492314,-0.2470251,0.3219114,-0.59859616,-1.2274381,0.2203692,0.15645842,-1.28383,0.7243153,0.24541464,-0.030007338,0.17969832,-0.004647537,0.19621871,0.113527454,-0.18680434,-0.16424239,-0.13084653,-0.31310573,0.29346675,0.6669505,0.2538935,-0.12314993,0.3751589,-0.02038046,0.36693043,-0.36482784,0.41033688,-0.14586376,0.20918742,-0.71222323,0.17538223,1.1371607,-0.4796128,0.8312696,-1.0873045,-7.2622766,-3.054264,0.27360857,-0.0272732,-0.2286186,0.44635215,-0.26051787,-0.25687614,-0.24467964,-0.3267878,-0.2846618,-0.20180032,-0.3424432,-0.3882162,-0.7390409,-0.37659243,-0.13230453,-1.1075977,-0.62828237,0.019029748,0.03132475,-1.0436382,-0.4144945,0.51794547,0.016211694,-0.3872102,0.25839397,-0.06518004,0.11100893,0.3693582,0.2515356,0.2502854,-0.6676977,-0.14460558,-1.0317441,-0.782825,-2.2622845,-0.6370033,-3.22823,-0.2598985,-6.4764137,-6.9470396,0.50298893,-0.044692807,-0.022750914,-0.17985784,0.015019641,0.046318837,0.16127947,0.024421338,0.023349876,0.26957715,0.28786024,0.16274783,-0.5423069,0.17056143,0.6094959,-0.05837151,0.20221019,0.20391998,-0.9372349,-0.65018517,0.33358943,-0.14246075,-0.49097505,-0.14130987,-0.3434319,-0.06923776,0.50345147,-0.5068273,0.084180295,0.04901588,0.63475144,0.88029575,0.85430145,-0.22982734,-0.023492463,-0.31101424,0.4877236,0.2549074,1.4882795,1.6286812,0.13219933,0.21479729,0.70549154,0.07689834,-0.40676522,0.116840914,-0.026231177,-0.44473925,0.27908376,-0.36023042,-0.10293859,-0.58715165,0.06175769,-0.6696047,-0.34385312,-0.2819454,0.3654859,0.26619753,-0.26528224,-0.10960265,-0.5061137,0.16305529,-0.045533177,-0.12199617,0.24090391,0.24818052,0.30410814,-0.11163119,-0.174745,-0.20911308,-0.56706715,-0.68812495,-0.8392167,-0.50867546,0.36981428,-0.23490812,0.59111196,-1.2825085,5.4836283,-4.794327,0.3758797,0.301449,0.90302545,1.4757583,1.997263,0.53955925,3.1683726,3.1141157,3.3101728,2.1289423,0.35385677,0.32258114,-0.32847548,-0.026095197,0.1742147,-0.27885577,0.5243738,0.3457899,-0.27025616,0.24000253,0.26431587,0.2868103,-0.27163008,0.031765588,-0.02827082,0.16366361,-0.40300196,0.03938503,0.11572101,-0.14687532,0.93545246,0.4392463,1.1739583,0.61828065,1.1491812,0.10092501,1.7518812,0.63252234,1.7558771,2.3966973,-0.88546085,0.74542814,-0.72160935,0.18536006,0.77974087,0.12387683,-0.8297247,-2.1894393,-3.6571417,-1.6748023,-0.29009676,-0.4153883,-0.00012170739,0.32488292,-0.23651516,0.45843846,-0.15198116,0.14436336,-0.13534807,0.27211544,-1.0057441,0.15161267,-0.92742056,-0.13403915,-0.13676126,0.39426988,-0.008097045,-2.0676272,1.9071589,1.6995788,-0.2147749,-0.8272287,0.025623681,0.040145535,0.5312023,-0.16483034,-0.040244646,-0.0036835298,0.15212876,-0.074754685,-0.27087405,-0.5714464,0.09289879,0.2631427,-0.20163481,0.118333325,0.052350994,0.33276695,-0.24906875,-0.11619686,-0.33468208,0.17514624,-0.026783077,0.3612086,-0.23390073,0.24427362,0.10510872,0.039819963,0.29750738,0.37866315,0.589377,0.11544002,-0.22212078,0.3131672,0.25825486,-0.23356427,0.10272056,0.32118022,0.18899308,-0.45039225,0.2925126,-0.266764,-0.08491096,0.79452413,0.2676463,-0.40218028,0.10167254,-0.023120124,0.15300259,0.31444204,0.051863536,-0.32150692,-1.1803782,0.41363975,0.1066711,-0.12558635,-0.5970296,-0.37730625,-1.2154136,-0.9226301,-1.0812129,-0.63891053,-0.9018678,-0.09395111,-0.19338799,-0.033752568,0.67868924,-0.5688978,-1.5560468,-1.3462145,-0.2580518,-0.05178536,0.33112392,-0.05419975,0.50212127,-0.26941678,0.23396243,-0.48806876,0.20911983,-0.083921194,-0.17217456,-0.32690647,-0.08522281,0.29674083,0.054961797,-0.068672165,0.50352347,0.5796339,0.13941105,0.27961203,-0.53994966,-1.4363457,-0.6717605,0.059643365,-0.8464489,-0.2501041,0.28804025,0.9057003,-0.53079164,-0.2532728,0.35896558,0.50449973,0.4539281,-0.14234243,0.08552957,-0.7709065,1.4623106,-0.78392905,1.0333663,0.4359543,-0.03140974,-0.16767003,-0.17539,-0.35810107,0.024223397,-0.00282877,-0.10285385,0.41072753,0.19540104,0.71794945,-0.5812088,1.641882,-0.47965038,0.00033550337,0.49472165,0.6152949,0.051699046,0.62589794,-6.135157,-3.2026231,0.097422406,0.29961264,0.033516966,0.39850613,0.6850332,0.19327033,0.1339159,-0.14353931,0.635579,0.11980618,-0.68181264,-0.9597117,-0.4303387,-0.06702983,-0.14089435,-0.26705235,-2.2477505,0.75562984,-6.671326,-6.0892663,-0.491643,-0.039716516,-1.2392502,-1.38418,-1.7775271,-0.9702512,-1.9555047,-1.1952581,3.6972136,-0.6637824,0.48024514,-0.080949396,0.29931346,-0.20683566,0.0051919776,0.23082496,-0.050180543,-0.14442112,-0.34583154,0.08608211,0.29004386,-0.33096108,0.20453268,0.42564842,-0.23745453,-0.27997094,-0.26287174,0.3607764,0.09690957,0.16645996,0.21906364,-0.07936721,0.3373102,0.25303206,-0.13666132,0.3514251,0.05406352,0.13930945,0.05097998,0.22528079,0.22392763,1.1326685,-0.3924749,2.2574062,1.503914,3.1201427,3.6020148,2.8877645,4.076578,2.420891,-0.061778285,-0.549551,-0.6325236,-0.21828738,-0.61644155,-0.54456264,1.8210056,0.14807323,3.4212513,4.710295,0.04316391,0.7248124,0.06753421,-0.21861324,-0.17186178,0.035961755,-0.4010679,0.19333716,0.11922616,0.404082,0.14245838,0.15828592,0.39609662,-0.29092804,-0.61575854,0.22685969,0.033241533,0.36614305,-0.32569313,0.26751262,-0.13260101,-0.23824462,-0.013569639,-0.1346996,0.16642603,-0.011437185,-0.32130292,0.4128292,0.35623613,0.042030346,-0.010898199,-0.07716781,0.14448214,-0.0895269,-0.16844618,0.07050712,0.1193316,0.0370062,0.11079326,0.3030458,-0.21536148,0.48449445,0.32616878,0.11540622,-0.10282339,-0.09225041,0.23935558,-0.14552951,-0.014596707,-0.21077274,-0.3937978,0.26819178,0.50247717,0.24563609,-0.380201,0.6032335,0.42140543,0.2567904,0.12814526,0.15257953,-0.6101612,0.22978377,-0.6361187,0.50111187,0.8173191,-0.27134869,-0.21337613,0.61361396,2.9081595,3.022412,
	};

   for(int i=0;i<num;i++)
	   weight[i]=weight_init[i];
}
*/
void bias_init(float *bias,double * bias_weight, int num){
	for(int i=0;i<num;i++)
	   bias[i]=(float)bias_weight[i];
}
void weight_init(float *weight,double * bias_weight, int num_base, int num){
	for(int i=0;i<num;i++)
		weight[i]=(float)bias_weight[num_base +  i];
}


void calculate_offset(int iter)
{

	volatile char *SHARED_DRAM;
	bias_offset = L1_NUM*L2_NUM+L2_NUM*L3_NUM;
	state_offset = bias_offset+L2_NUM+L3_NUM;
	exp_pool_offset = state_offset+L1_NUM;
	result_offset = exp_pool_offset+iter*BATCH_SIZE;
	SHARED_DRAM = (volatile char *)XFPGA_shared_DRAM_virtual();
	//SHARED_DRAM = (volatile char *)XFPGA_shared_DRAM_physical();
	SHARED_BASE = (volatile float *)(SHARED_DRAM);
    SHARED_BIAS = SHARED_BASE+bias_offset;
    SHARED_STATES = SHARED_BASE+state_offset ;
    SHARED_EXP = SHARED_BASE+exp_pool_offset;
    SHARED_RESULT = SHARED_BASE+result_offset ;
}

void copy_Initdata_to_dram(float *weight ,float *bias)
{
	 cout<<weight[0]<<endl;
	 cout<<weight[1]<<endl;
	 cout<<weight[2]<<endl;
	  memcpy((void *)SHARED_BASE, weight, (L1_NUM*L2_NUM+L2_NUM*L3_NUM)*sizeof(float));

	  cout<<((float*)SHARED_BASE)[0]<<endl;
	  cout<<((float*)SHARED_BASE)[1]<<endl;
	  cout<<((float*)SHARED_BASE)[2]<<endl;

	  memcpy((void *)SHARED_BIAS, bias, (L2_NUM+L3_NUM)*sizeof(float));


}

void copy_state_to_dram(float *state)
{
	 cout<<((float*)SHARED_STATES)[0]<<endl;
	 memcpy((void *)SHARED_STATES, state, (L1_NUM)*sizeof(float));
	 cout<<((float*)SHARED_STATES)[0]<<endl;

}

void copy_experience_to_dram(float *experience,int iter)
{
	  memcpy((void *)SHARED_EXP,experience, (iter*BATCH_SIZE)*sizeof(float));
}

void copy_ation_from_dram(float *action)
{
	  //cout<<((float*)SHARED_RESULT)[0]<<endl;
	  memcpy(action,(void *)SHARED_RESULT,(L3_NUM)*sizeof(float));
	  //cout<<action[0]<<endl;

}
